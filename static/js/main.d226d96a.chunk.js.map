{"version":3,"sources":["context/SelectedNominatorsContext.js","components/table/NominatorTile.jsx","context/NominatorsContext.js","components/Button.js","utils/setProvider.js","utils/getApi.js","utils/chillNominators.js","constants.js","context/NetworkContext.js","components/table/SortButton.jsx","context/StatisticsContext.js","context/SelectedAccountContext.js","components/table/TableHeader.jsx","components/table/ChillAllTile.jsx","components/table/NominatorTable.jsx","components/LoadingState.js","utils/fetchNominators.js","components/ConnectToWallet.jsx","utils/fetchStatistics.js","components/statistics/Statistic.jsx","components/statistics/StatisticsGroup.jsx","components/statistics/StatisticsBox.jsx","components/networkswitch/kusamaLogo.svg","components/networkswitch/polkadotLogo.svg","components/networkswitch/NetworkLogo.jsx","components/networkswitch/SwitchNetwork.jsx","ChillApp.jsx","index.js"],"names":["SelectedNominatorsContext","React","createContext","NominatorTile","address","amount","idx","useContext","selectedNominators","setSelectedNominators","isSelected","includes","className","checked","onChange","oldState","filter","e","type","substring","length","NominatorsContext","Button","name","onClick","color","buttonColor","undefined","style","borderColor","backgroundColor","getEndpointForNetwork","provider","SUPPORTED_NETWORKS","POLKADOT","KUSAMA","Error","Object","freeze","_api","getApi","selectedNetwork","a","endpoint","WsProvider","ApiPromise","create","api","rpc","system","chain","nodeName","console","log","chillNominators","statistics","account","nominatorsList","chillableAmount","transactions","map","nominator","tx","staking","chillOther","slice","web3FromSource","meta","source","injector","utility","batch","signAndSend","signer","status","isInBlock","asInBlock","isBroadcast","isFinalized","asFinalized","isReady","COLORS","NetworkContext","SortButton","setNominators","SORT_ORDER","useState","ASC","sortOrder","setSortOrder","order","newState","sort","b","onColor","offColor","checkedIcon","uncheckedIcon","StatisticsContext","SelectedAccountContext","TableHeader","nominators","selectedAccount","ChillAllTile","val","target","_","handleOnChange","NominatorTable","onNominatorsFetched","key","LoadingState","fetchNominators","onSuccess","nominatorIds","minNominatorBond","query","bonded","multi","then","_controllers","controllers","controller","unwrapOrDefault","ledger","_stakes","nominatorsBelow","stake","item","total","toBn","toNumber","stash","toHuman","classNames","classes","Boolean","join","ConnectToWallet","setSelectedAccount","accounts","setAccounts","balance","setBalance","startWeb3","web3Enable","web3Accounts","allAccounts","fetchBalance","handleOnAccountChange","newAccount","previousFree","data","free","useEffect","value","open","show","as","Fragment","leave","leaveFrom","leaveTo","Options","Option","active","selected","fetchStatistics","Promise","all","keys","maxNominatorsCount","chillThreshold","nominatorKeys","args","threshold","Statistic","count","textColor","StatisticsGroup","first","second","StatisticsBox","isLoading","NetworkLogo","Logo","network","PolkadotLogo","KusamaLogo","width","height","src","SwitchNetwork","setSelectedNetwork","ChillApp","setStatistics","isLoadingNominators","setIsLoadingNominators","isLoadingStatistics","setIsLoadingStatistics","setupChillApp","Provider","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d226d96a.chunk.js","sourcesContent":["import React from \"react\";\n\n//Stores the addresses of nominators the user selected for chilling;\nexport const SelectedNominatorsContext = React.createContext(null);\n","import React, {useContext} from \"react\";\nimport {SelectedNominatorsContext} from \"../../context/SelectedNominatorsContext\";\n\nexport const NominatorTile = ({address, amount, idx}) => {\n\n    const {selectedNominators, setSelectedNominators} = useContext(SelectedNominatorsContext);\n\n    const getBackgroundColor = () => idx % 2 !== 0 ? \"bg-gray-100\" : \"bg-white\";\n\n    const isSelected = () => selectedNominators.includes(address)\n\n    const trimAddress = () => `${address.substring(0, 5)}...${address.substring(address.length - 6, address.length - 1)}`\n\n    const handleOnChange = () => {\n        setSelectedNominators(\n            oldState =>\n                isSelected() ?\n                    oldState.filter(e => e !== address) :\n                    [...oldState, address]\n        );\n    }\n\n\n    return <div className={\"flex justify-between p-2 pr-4 border-gray-200 border items-center \" + getBackgroundColor()}>\n        <input checked={isSelected()} onChange={handleOnChange} type=\"checkbox\"\n               className=\"w-1/12 text-left\"/>\n        <div>\n            <p className=\"w-8/12 text-left self-center\">{trimAddress()}</p>\n        </div>\n        <p className=\"mx-4 w-3/12 text-right\">{amount}</p>\n    </div>\n}\n","import React from \"react\";\n\nexport const NominatorsContext = React.createContext(null)\n","import React from \"react\";\n\nexport const Button = ({name, onClick, color}) => {\n\n    const buttonColor = color === undefined ? \"#E6007A\" : color;\n    return <button\n        style={{\n            borderColor: buttonColor,\n            backgroundColor: buttonColor\n        }}\n        onClick={onClick}\n        className={`h-full items-center border-2 py-2 px-6  h-fit text-lg text-white tracking-wider font-bold rounded-sm`}>\n        {name}\n    </button>\n}\n\n","export const getEndpointForNetwork = provider => {\n    switch (provider) {\n        case SUPPORTED_NETWORKS.POLKADOT:\n            return \"wss://rpc.polkadot.io\";\n        case SUPPORTED_NETWORKS.KUSAMA :\n            return \"wss://kusama-rpc.polkadot.io\";\n        default:\n            throw Error(`Unknown Provider ${provider}`);\n    }\n}\n\nexport const SUPPORTED_NETWORKS = Object.freeze({\n    \"POLKADOT\": \"POLKADOT\",\n    \"KUSAMA\": \"KUSAMA\"\n})\n","import {getEndpointForNetwork} from \"./setProvider\";\nimport {ApiPromise, WsProvider} from \"@polkadot/api\";\n\n\nlet _api = null;\n\nexport const getApi = async (selectedNetwork) => {\n\n    //Singleton here :D\n    if (_api !== null) {\n        //console.log(\"used api instance from singleton\")\n        //return _api;\n    }\n\n    const endpoint = getEndpointForNetwork(selectedNetwork);\n\n    const provider = new WsProvider(endpoint);\n    const api = await ApiPromise.create({provider});\n\n    const nodeName = await api.rpc.system.chain();\n\n    console.log(`Connected to node ${nodeName}`);\n\n    _api = api;\n    return _api;\n}\n","import {getApi} from \"./getApi\";\nimport {web3FromSource} from \"@polkadot/extension-dapp\";\n\nexport const chillNominators = async (statistics, account, nominatorsList) => {\n\n    const api = await getApi();\n\n    const {chillableAmount} = statistics;\n\n    //createTransactionBatch\n    const transactions = nominatorsList.map(nominator => api.tx.staking.chillOther(nominator));\n\n\n    // if they are higher than `chillableAmount`\n    if (nominatorsList.length > chillableAmount) {\n        nominatorsList.slice(0, chillableAmount - 1);\n    }\n\n\n    const injector = await web3FromSource(account.meta.source);\n\n    console.log(\"Total chillable:\", transactions.length);\n\n    console.log(\"Nominator\")\n\n\n    console.log(nominatorsList)\n    console.log(transactions)\n\n\n    // return;\n\n    const tx = api.tx.utility.batch(transactions);\n    await tx.signAndSend(account.address, {signer: injector.signer}, ({status}) => {\n        if (status.isInBlock) {\n            console.log(\n                `📀 Transaction ${tx.meta.name} included at blockHash ${status.asInBlock}`\n            );\n        } else if (status.isBroadcast) {\n            console.log(`🚀 Transaction broadcasted.`);\n        } else if (status.isFinalized) {\n            console.log(\n                `💯 Transaction ${tx.meta.name}(..) Finalized at blockHash ${status.asFinalized}`\n            );\n        } else if (status.isReady) {\n            // let's not be too noisy..\n        } else {\n            console.log(`🤷 Other status ${status}`);\n        }\n    });\n\n}\n","export const COLORS = Object.freeze({\n    \"POLKADOT\": \"#E6007A\",\n    \"KUSAMA\": \"#4E4E4E\"\n})\n","import React from \"react\";\n\nexport const NetworkContext = React.createContext(null);\n","import React, {useContext, useState} from \"react\";\nimport Switch from \"react-switch\";\nimport {NominatorsContext} from \"../../context/NominatorsContext\";\nimport {SUPPORTED_NETWORKS} from \"../../utils/setProvider\";\nimport {COLORS} from \"../../constants\";\nimport {NetworkContext} from \"../../context/NetworkContext\";\n\nexport const SortButton = ({}) => {\n    const {selectedNetwork} = useContext(NetworkContext);\n    const {setNominators} = useContext(NominatorsContext);\n\n    const SORT_ORDER = Object.freeze({\n        \"ASC\": false,\n        \"DESC\": true\n    })\n    const [sortOrder, setSortOrder] = useState(SORT_ORDER.ASC)\n\n    const getSortOrderName = () => `${sortOrder === SORT_ORDER.ASC ? \"ASC\" : \"DESC\"}`\n\n    const buttonColor = selectedNetwork === SUPPORTED_NETWORKS.POLKADOT ? COLORS.POLKADOT : COLORS.KUSAMA;\n\n\n    const sortNominators = order => {\n        setSortOrder(order);\n        setNominators(oldState => {\n                const newState = [...oldState];\n                order === SORT_ORDER.ASC ?\n                    newState.sort((a, b) => a.amount > b.amount ? 1 : -1) :\n                    newState.sort((a, b) => a.amount < b.amount ? 1 : -1);\n                return newState;\n            }\n        );\n    }\n\n    return <div className=\"flex items-center \">\n        <p className=\"pr-2 \">{getSortOrderName()}</p>\n        <Switch onChange={sortNominators}\n                onColor={buttonColor}\n                offColor={buttonColor}\n                checked={sortOrder}\n                checkedIcon={false}\n                uncheckedIcon={false}\n        />\n    </div>\n\n}\n","import React from \"react\";\n\nexport const StatisticsContext = React.createContext(null)\n","import React from \"react\";\n\nexport const SelectedAccountContext = React.createContext(null);\n","import {NominatorsContext} from \"../../context/NominatorsContext\";\nimport {SelectedNominatorsContext} from \"../../context/SelectedNominatorsContext\";\nimport React, {useContext} from \"react\";\nimport {Button} from \"../Button\";\nimport {chillNominators} from \"../../utils/chillNominators\";\nimport {SortButton} from \"./SortButton\";\nimport {StatisticsContext} from \"../../context/StatisticsContext\";\nimport {SelectedAccountContext} from \"../../context/SelectedAccountContext\";\nimport {NetworkContext} from \"../../context/NetworkContext\";\nimport {SUPPORTED_NETWORKS} from \"../../utils/setProvider\";\nimport {COLORS} from \"../../constants\";\n\nexport const TableHeader = () => {\n\n    const {nominators, setNominators} = useContext(NominatorsContext);\n    const {selectedNominators} = useContext(SelectedNominatorsContext);\n    const {statistics} = useContext(StatisticsContext);\n    const {selectedAccount} = useContext(SelectedAccountContext);\n    const {selectedNetwork} = useContext(NetworkContext);\n\n    const handleOnClick = () => {\n        chillNominators(statistics, selectedAccount, selectedNominators);\n\n    }\n\n    const getButtonName = () => `Chill ${selectedNominators.length}`\n\n    const buttonColor = selectedNetwork === SUPPORTED_NETWORKS.POLKADOT ? COLORS.POLKADOT : COLORS.KUSAMA;\n\n\n    return <div className=\"text-lg\">\n\n        <div className=\"flex justify-between mb-2  p-4  bg-white items-center\">\n            <p className=\"text-2xl \">Nominators ({nominators.length})</p>\n            <div className=\"flex justify-between items-center w-4/12 \">\n                <SortButton/>\n                <Button onClick={handleOnClick} name={getButtonName()} color={buttonColor}/>\n            </div>\n        </div>\n        <div className=\"flex items-center font-bold px-4 py-2 bg-white \">\n            <p className=\"w-1/12 text-left\">Wanna Chill ? </p>\n            <p className=\"w-8/12\">Address</p>\n            <p className=\"w-3/12 text-right  \">Amount</p>\n        </div>\n    </div>\n\n}\n","import React, {useContext} from \"react\";\nimport {SelectedNominatorsContext} from \"../../context/SelectedNominatorsContext\";\nimport {NominatorsContext} from \"../../context/NominatorsContext\";\n\nexport const ChillAllTile = () => {\n    const {selectedNominators, setSelectedNominators} = useContext(SelectedNominatorsContext);\n    const {nominators} = useContext(NominatorsContext);\n\n    const getBackgroundColor = () => \"bg-gray-100\";\n\n    const handleOnChange = (val) => {\n        const isSelected = val.target.checked;\n        setSelectedNominators(_ => isSelected ? [...nominators.map(e => e.address)] : []);\n    }\n\n    return <div className={\"flex justify-between p-2 border-gray-200 border items-center \" + getBackgroundColor()}>\n        <input onChange={(val) => handleOnChange(val)} type=\"checkbox\" className=\"w-1/12 text-left\"/>\n        <p className=\"w-8/12 text-left self-center font-bold\">Chill all nominators</p>\n        <p className=\"mx-4 w-3/12 text-right\"></p>\n    </div>\n}\n","import React, {useContext} from \"react\";\nimport {NominatorTile} from \"./NominatorTile\";\nimport {TableHeader} from \"./TableHeader\";\nimport {NominatorsContext} from \"../../context/NominatorsContext\";\nimport {ChillAllTile} from \"./ChillAllTile\";\n\nexport const NominatorTable = () => {\n\n    const {nominators, onNominatorsFetched} = useContext(NominatorsContext);\n\n\n    return <div>\n        <TableHeader/>\n        <ChillAllTile/>\n        {nominators.map((nominator, key) => <NominatorTile {...nominator} idx={key} key={nominator.address}/>)}\n    </div>\n}\n","import React from \"react\"\n\n//Todo add fancy loading state!!!\nexport const LoadingState = () => <p>Nominators are being loaded...</p>\n","//provider can be kusama or polkadot\n\n\nexport const fetchNominators = async (api, statistics, onSuccess) => {\n\n    const {nominatorIds, minNominatorBond} = statistics;\n\n    await api.query.staking.bonded\n        .multi(nominatorIds)\n        .then(async (_controllers) => {\n            const controllers = _controllers.map((controller) =>\n                controller.unwrapOrDefault()\n            );\n            await api.query.staking.ledger\n                .multi(controllers)\n                .then(async (_stakes) => {\n                    const nominatorsBelow = _stakes\n                        .map((stake) => stake.unwrapOrDefault())\n                        .filter((item) => item.total.toBn() < minNominatorBond.toNumber())\n                        .map(({stash, total}) => ({\n                            address: stash.toHuman(),\n                            amount: total.toHuman(),\n                        }));\n\n                    onSuccess(nominatorsBelow)\n\n                });\n        });\n\n}\n\n\n","/* This example requires Tailwind CSS v2.0+ */\nimport React, {Fragment, useContext, useEffect, useState} from \"react\";\nimport {web3Accounts, web3Enable} from \"@polkadot/extension-dapp\";\nimport {Listbox, Transition} from '@headlessui/react'\nimport {CheckIcon, SelectorIcon} from '@heroicons/react/solid'\nimport {getApi} from \"../utils/getApi\";\nimport {NetworkContext} from \"../context/NetworkContext\";\n\n\nfunction classNames(...classes) {\n    return classes.filter(Boolean).join(' ')\n}\n\nexport function ConnectToWallet({selectedAccount, setSelectedAccount}) {\n    const {selectedNetwork} = useContext(NetworkContext);\n\n    const [accounts, setAccounts] = useState([]);\n    const [balance, setBalance] = useState(\"\");\n\n\n\n    const startWeb3 = async () => {\n        console.log(\"Fetching Accounts\")\n        const allInjected = await web3Enable('dotsama-chill');\n\n        const allAccounts = await web3Accounts();\n\n        console.log(\"got accounts\")\n\n        setAccounts(allAccounts);\n        setSelectedAccount(allAccounts[0]);\n\n        console.log(selectedAccount)\n\n        fetchBalance(allAccounts[0]);\n\n    }\n\n\n    const handleOnAccountChange = async (newAccount) => {\n        setSelectedAccount(newAccount);\n        fetchBalance(newAccount);\n\n    }\n\n    const fetchBalance = async (account) => {\n        const api = await getApi(selectedNetwork);\n\n        const {data: {free: previousFree}} = await api.query.system.account(account.address);\n        setBalance(previousFree.toHuman());\n    }\n\n    useEffect(() => {\n        startWeb3()\n    }, []);\n\n\n    return (\n\n        accounts.length === 0 ? <p>Please connect Polkadot.js Wallet</p> :\n\n            <div className=\"flex items-center\">\n                <p className=\"pr-4\">{balance}</p>\n                <Listbox value={selectedAccount} onChange={handleOnAccountChange}>\n                    {({open}) => (\n                        <>\n                            <div className=\"mt-1 relative pr-4\">\n                                <Listbox.Button\n                                    className=\"relative w-full bg-white border border-gray-300 rounded-md shadow-sm pl-3 pr-10 py-2 text-left cursor-default focus:outline-none focus:ring-1 focus:ring-black focus:border-black sm:text-sm\">\n              <span className=\"flex items-center\">\n                {/*<img src={selected.avatar} alt=\"\" className=\"flex-shrink-0 h-6 w-6 rounded-full\"/>*/}\n                  <span className=\"ml-3 block truncate\">{selectedAccount.meta.name}</span>\n              </span>\n                                    <span\n                                        className=\"ml-3 absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none\">\n                <SelectorIcon className=\"h-5 w-5 text-gray-400\" aria-hidden=\"true\"/>\n              </span>\n                                </Listbox.Button>\n\n                                <Transition\n                                    show={open}\n                                    as={Fragment}\n                                    leave=\"transition ease-in duration-100\"\n                                    leaveFrom=\"opacity-100\"\n                                    leaveTo=\"opacity-0\"\n                                >\n                                    <Listbox.Options\n                                        className=\"absolute z-10 mt-1 w-full bg-white shadow-lg max-h-56 rounded-md py-1 text-base ring-1 ring-black ring-opacity-5 overflow-auto focus:outline-none sm:text-sm\">\n                                        {accounts.map((account) => (\n                                            <Listbox.Option\n                                                key={account.address}\n                                                className={({active}) =>\n                                                    classNames(\n                                                        active ? 'text-white bg-black' : 'text-gray-900',\n                                                        'cursor-default select-none relative py-2 pl-3 pr-9'\n                                                    )\n                                                }\n                                                value={account}\n                                            >\n                                                {({selected, active}) => (\n                                                    <>\n                                                        <div className=\"flex items-center\">\n                                                            {/*<img src={account.avatar} alt=\"\" className=\"flex-shrink-0 h-6 w-6 rounded-full\"/>*/}\n                                                            <span\n                                                                className={classNames(selected ? 'font-semibold' : 'font-normal', 'ml-3 block truncate')}\n                                                            >\n                            {account.meta.name}\n                          </span>\n                                                        </div>\n\n                                                        {selected ? (\n                                                            <span\n                                                                className={classNames(\n                                                                    active ? 'text-white' : 'text-black',\n                                                                    'absolute inset-y-0 right-0 flex items-center pr-4'\n                                                                )}\n                                                            >\n                            <CheckIcon className=\"h-5 w-5\" aria-hidden=\"true\"/>\n                          </span>\n                                                        ) : null}\n                                                    </>\n                                                )}\n                                            </Listbox.Option>\n                                        ))}\n                                    </Listbox.Options>\n                                </Transition>\n                            </div>\n                        </>\n                    )}\n                </Listbox>\n            </div>\n    )\n}\n","export const fetchStatistics = async (api) => {\n\n\n    const [nominatorKeys, minNominatorBond, maxNominatorsCount, chillThreshold] = await Promise.all([\n            api.query.staking.nominators.keys(),\n            api.query.staking.minNominatorBond(),\n            api.query.staking.maxNominatorsCount(),\n            api.query.staking.chillThreshold(),\n        ],\n    );\n\n    const nominatorIds = nominatorKeys.map(({args: [nominatorId]}) => nominatorId)\n    const threshold = (chillThreshold / 100) * maxNominatorsCount;\n\n    const chillableAmount = nominatorIds.length - threshold;\n\n    // User should not be allowed to chillOther as this is not possible if it is below threshold.\n    //TODO isnt the resulting array of fetch nominators empty if this case happens ?\n    if (nominatorIds.length < threshold) {\n        console.log(`You can\\'t chill others when nominators (${nominatorIds.length}) is below threshold (${threshold})`);\n        return;\n    }\n\n    return {\n        chillableAmount,\n        nominatorIds,\n        threshold,\n        minNominatorBond\n    }\n}\n","import React from \"react\";\n\nexport const Statistic = ({count, name, textColor}) =>\n    <div>\n        <p className={\"text-4xl pb-2 \"}>{count}</p>\n        <p className={\"text-lg text-\" + textColor}>{name}</p>\n    </div>\n\n","import React from \"react\";\nimport {Statistic} from \"./Statistic\";\n\nexport const StatisticsGroup = ({first, second}) => {\n    return <div className=\"gap-8  bg-white border-white rounded-2xl mb-4 p-12 px-16 grid grid-cols-2\">\n        <Statistic {...first}/>\n        <Statistic {...second}/>\n    </div>\n}\n","import React from \"react\";\nimport {StatisticsGroup} from \"./StatisticsGroup\";\n\nexport const StatisticsBox = ({\n                                  chillableAmount,\n                                  nominatorIds,\n                                  threshold,\n                                  minNominatorBond,\n                                  isLoading\n                              }) => {\n    const minNominatorBondOrDefault = () => isLoading ? \"Loading\" : minNominatorBond.toHuman();\n    const nominatorIdsOrDefault = () => isLoading ? \"Loading\" : nominatorIds.length;\n    const chillableAmountOrDefault = () => isLoading ? \"Loading\" : chillableAmount;\n    const thresholdOrDefault = () => (isLoading ? \"Loading\" : threshold);\n    return (\n        <div className=\"flex justify-between mb-8\">\n            <StatisticsGroup\n                first={{\n                    name: \"Threshold\",\n                    count: thresholdOrDefault(),\n                    textColor: \"red-500\",\n                }}\n            />\n            <div></div>\n            <StatisticsGroup\n                first={{\n                    name: \"Chillable Amount\",\n                    count: chillableAmountOrDefault(),\n                    textColor: \"yellow-500\",\n                }}\n            />\n            <div></div>\n\n            <StatisticsGroup\n                first={{\n                    name: \"Minimum Nominator Bond\",\n                    count: minNominatorBondOrDefault(),\n                    textColor: \"blue-500\",\n                }}\n            />\n        </div>\n    );\n};\n","export default __webpack_public_path__ + \"static/media/kusamaLogo.445b5ac3.svg\";","export default __webpack_public_path__ + \"static/media/polkadotLogo.fbd6b0a6.svg\";","import React from \"react\";\nimport KusamaLogo from \"./kusamaLogo.svg\";\nimport PolkadotLogo from \"./polkadotLogo.svg\";\nimport {SUPPORTED_NETWORKS} from \"../../utils/setProvider\";\n\nexport const NetworkLogo = ({network}) => {\n\n    const Logo = network === SUPPORTED_NETWORKS.POLKADOT ? PolkadotLogo : KusamaLogo\n\n    return <div className=\"m-2\">\n        <div className=\"flex items-center\" style={{width: \"30px\", height: \"30px\"}}>\n            < img src={Logo}/>\n        </div>\n    </div>\n}\n","import React, {useContext} from \"react\";\nimport Switch from \"react-switch\";\nimport {SUPPORTED_NETWORKS} from \"../../utils/setProvider\";\nimport {COLORS} from \"../../constants\";\nimport {NetworkContext} from \"../../context/NetworkContext\";\n\n\nimport {NetworkLogo} from \"./NetworkLogo\";\n\nexport const SwitchNetwork = () => {\n\n    const {selectedNetwork, setSelectedNetwork} = useContext(NetworkContext);\n\n    const isChecked = () => selectedNetwork === SUPPORTED_NETWORKS.POLKADOT;\n\n    const onChange = val => val ? setSelectedNetwork(SUPPORTED_NETWORKS.POLKADOT) : setSelectedNetwork(SUPPORTED_NETWORKS.KUSAMA);\n\n    const networkName = selectedNetwork === SUPPORTED_NETWORKS.POLKADOT ? \"Polkadot\" : \"Kusama\";\n\n    return <div className=\"flex items-center \">\n        <NetworkLogo network={SUPPORTED_NETWORKS.KUSAMA}/>\n        <Switch\n            onColor={COLORS.POLKADOT}\n            offColor={COLORS.KUSAMA}\n            checked={isChecked()}\n            onChange={onChange}\n            checkedIcon={false}\n            uncheckedIcon={false}\n        />\n        <NetworkLogo network={SUPPORTED_NETWORKS.POLKADOT}/>\n\n    </div>\n}\n","import {NominatorTable} from \"./components/table/NominatorTable\";\nimport {NominatorsContext} from \"./context/NominatorsContext\";\nimport React, {useEffect, useState} from \"react\";\nimport {LoadingState} from \"./components/LoadingState\";\nimport {fetchNominators} from \"./utils/fetchNominators\";\nimport {SUPPORTED_NETWORKS} from \"./utils/setProvider\";\nimport {SelectedNominatorsContext} from \"./context/SelectedNominatorsContext\";\nimport {ConnectToWallet} from \"./components/ConnectToWallet\";\nimport {getApi} from \"./utils/getApi\";\nimport {fetchStatistics} from \"./utils/fetchStatistics\";\nimport {StatisticsContext} from \"./context/StatisticsContext\";\nimport {SelectedAccountContext} from \"./context/SelectedAccountContext\";\nimport {StatisticsBox} from \"./components/statistics/StatisticsBox\";\nimport {SwitchNetwork} from \"./components/networkswitch/SwitchNetwork\";\nimport {NetworkContext} from \"./context/NetworkContext\";\n\nexport const ChillApp = ({}) => {\n\n    const [nominators, setNominators] = useState([]);\n    const [selectedNominators, setSelectedNominators] = useState([]);\n    const [selectedNetwork, setSelectedNetwork] = useState(SUPPORTED_NETWORKS.POLKADOT);\n\n    const [statistics, setStatistics] = useState({\n        chillableAmount: 0,\n        nominatorIds: 0,\n        threshold: 0,\n        minNominatorBond: 0\n    });\n\n    const [selectedAccount, setSelectedAccount] = useState({address: null, meta: {name: null}})\n\n    const [isLoadingNominators, setIsLoadingNominators] = useState(true);\n    const [isLoadingStatistics, setIsLoadingStatistics] = useState(true)\n\n\n    useEffect(() => {\n        setupChillApp();\n    }, [selectedNetwork])\n\n    const setupChillApp = async () => {\n        setIsLoadingNominators(true)\n        setIsLoadingStatistics(true);\n        const api = await getApi(selectedNetwork);\n        const statistics = await fetchStatistics(api);\n\n\n        fetchNominators(api, statistics, onNominatorsFetched);\n        setStatistics(statistics);\n        setIsLoadingStatistics(false)\n\n    }\n\n\n    const onNominatorsFetched = nominatorsList => {\n        nominatorsList.sort((a, b) => a.amount > b.amount ? 1 : -1);\n        setNominators(nominatorsList);\n        setIsLoadingNominators(false);\n    }\n\n\n    return <NominatorsContext.Provider value={{nominators, setNominators}}>\n        <SelectedNominatorsContext.Provider value={{selectedNominators, setSelectedNominators}}>\n            <StatisticsContext.Provider value={{statistics}}>\n                <SelectedAccountContext.Provider value={{selectedAccount}}>\n                    <NetworkContext.Provider value={{selectedNetwork, setSelectedNetwork}}>\n                        <div className=\" p-24 h-screen\" style={{backgroundColor: \"#f5f3f1\"}}>\n                            <SwitchNetwork selectedNetwork={selectedNetwork} setSelectedNetwork={setSelectedNetwork}/>\n                            <div className=\"flex justify-between items-start pb-6\">\n                                <h1 className=\"text-4xl \">dotsama-chill</h1>\n                                <ConnectToWallet selectedAccount={selectedAccount} setSelectedAccount={setSelectedAccount} />\n                            </div>\n                            <p className=\"text-md pb-6\">A tool to list nominators below threshold and has the option to\n                                chill multiple\n                                nominators in\n                                a batch.</p>\n                            <StatisticsBox {...statistics} isLoading={isLoadingStatistics}/>\n                            {isLoadingNominators ? <LoadingState/> : <NominatorTable/>}\n                        </div>\n                    </NetworkContext.Provider>\n                </SelectedAccountContext.Provider>\n            </StatisticsContext.Provider>\n        </SelectedNominatorsContext.Provider>\n    </NominatorsContext.Provider>\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport \"./index.css\";\n\nimport {ChillApp} from \"./ChillApp\";\n\nReactDOM.render(<ChillApp/>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}