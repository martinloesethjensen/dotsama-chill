{"version":3,"sources":["context/SelectedNominatorsContext.js","components/table/NominatorTile.jsx","context/NominatorsContext.js","components/Button.js","utils/setProvider.js","utils/getApi.js","utils/chillNominators.js","constants.js","context/NetworkContext.js","components/table/SortButton.jsx","context/StatisticsContext.js","context/SelectedAccountContext.js","components/table/TableHeader.jsx","components/table/ChillAllTile.jsx","components/loadingstates/NominatorLoadingState.jsx","components/table/NominatorTable.jsx","utils/fetchNominators.js","utils/fetchStatistics.js","components/statistics/Statistic.jsx","components/statistics/StatisticsGroup.jsx","components/statistics/StatisticsBox.jsx","components/ConnectToWallet.jsx","components/networkswitch/kusamaLogo.svg","components/networkswitch/polkadotLogo.svg","components/networkswitch/NetworkLogo.jsx","components/networkswitch/SwitchNetwork.jsx","components/Header.jsx","ChillApp.jsx","index.js"],"names":["SelectedNominatorsContext","React","createContext","NominatorTile","address","amount","idx","useContext","selectedNominators","setSelectedNominators","isSelected","includes","className","checked","onChange","oldState","filter","e","type","substring","length","NominatorsContext","Button","name","onClick","color","buttonColor","undefined","style","borderColor","backgroundColor","getEndpointForNetwork","provider","SUPPORTED_NETWORKS","POLKADOT","KUSAMA","Error","Object","freeze","getApi","selectedNetwork","a","endpoint","WsProvider","ApiPromise","create","api","rpc","system","chain","nodeName","console","log","chillNominators","statistics","account","nominatorsList","chillableAmount","transactions","map","nominator","tx","staking","chillOther","slice","web3FromSource","meta","source","injector","utility","batch","signAndSend","signer","status","isInBlock","asInBlock","isBroadcast","isFinalized","asFinalized","isReady","COLORS","NetworkContext","SortButton","setNominators","SORT_ORDER","useState","ASC","sortOrder","setSortOrder","order","newState","sort","b","onColor","offColor","checkedIcon","uncheckedIcon","StatisticsContext","SelectedAccountContext","TableHeader","nominators","selectedAccount","ChillAllTile","val","target","_","handleOnChange","NominatorLoadingState","NominatorTable","isLoadingNominators","onNominatorsFetched","key","fetchNominators","onSuccess","nominatorIds","minNominatorBond","query","bonded","multi","then","_controllers","controllers","controller","unwrapOrDefault","ledger","_stakes","nominatorsBelow","stake","item","total","toBn","toNumber","stash","toHuman","fetchStatistics","Promise","all","keys","maxNominatorsCount","chillThreshold","currentEra","nominatorKeys","args","threshold","Statistic","count","textColor","StatisticsGroup","first","second","StatisticsBox","isLoading","classNames","classes","Boolean","join","ConnectToWallet","setSelectedAccount","accounts","setAccounts","balance","setBalance","startWeb3","web3Enable","web3Accounts","allAccounts","fetchBalance","handleOnAccountChange","newAccount","previousFree","data","free","useEffect","value","open","show","as","Fragment","leave","leaveFrom","leaveTo","Options","Option","active","selected","NetworkLogo","Logo","network","PolkadotLogo","KusamaLogo","width","height","src","SwitchNetwork","setSelectedNetwork","Header","ChillApp","setStatistics","setIsLoadingNominators","isLoadingStatistics","setIsLoadingStatistics","setupChillApp","Provider","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0123f9d3.chunk.js","sourcesContent":["import React from \"react\";\n\n//Stores the addresses of nominators the user selected for chilling;\nexport const SelectedNominatorsContext = React.createContext(null);\n","import React, {useContext} from \"react\";\nimport {SelectedNominatorsContext} from \"../../context/SelectedNominatorsContext\";\n\nexport const NominatorTile = ({address, amount, idx}) => {\n\n    const {selectedNominators, setSelectedNominators} = useContext(SelectedNominatorsContext);\n\n    const getBackgroundColor = () => idx % 2 !== 0 ? \"bg-gray-100\" : \"bg-white\";\n\n    const isSelected = () => selectedNominators.includes(address)\n\n    const trimAddress = () => `${address.substring(0, 5)}...${address.substring(address.length - 6, address.length - 1)}`\n\n    const handleOnChange = () => {\n        setSelectedNominators(\n            oldState =>\n                isSelected() ?\n                    oldState.filter(e => e !== address) :\n                    [...oldState, address]\n        );\n    }\n\n\n    return <div className={\"flex justify-between p-2 pr-4 border-gray-200 border items-center \" + getBackgroundColor()}>\n        <input checked={isSelected()} onChange={handleOnChange} type=\"checkbox\"\n               className=\"w-1/12 text-left\"/>\n        <div>\n            <p className=\"w-8/12 text-left self-center\">{trimAddress()}</p>\n        </div>\n        <p className=\"mx-4 w-3/12 text-right\">{amount}</p>\n    </div>\n}\n","import React from \"react\";\n\nexport const NominatorsContext = React.createContext(null)\n","import React from \"react\";\n\nexport const Button = ({name, onClick, color}) => {\n\n    const buttonColor = color === undefined ? \"#E6007A\" : color;\n    return <button\n        style={{\n            borderColor: buttonColor,\n            backgroundColor: buttonColor\n        }}\n        onClick={onClick}\n        className={`h-full items-center border-2 py-2 px-6  h-fit text-lg text-white tracking-wider font-bold rounded-sm`}>\n        {name}\n    </button>\n}\n\n","export const getEndpointForNetwork = provider => {\n    switch (provider) {\n        case SUPPORTED_NETWORKS.POLKADOT:\n            return \"wss://rpc.polkadot.io\";\n        case SUPPORTED_NETWORKS.KUSAMA :\n            return \"wss://kusama-rpc.polkadot.io\";\n        default:\n            throw Error(`Unknown Provider ${provider}`);\n    }\n}\n\nexport const SUPPORTED_NETWORKS = Object.freeze({\n    \"POLKADOT\": \"POLKADOT\",\n    \"KUSAMA\": \"KUSAMA\"\n})\n","import {getEndpointForNetwork} from \"./setProvider\";\nimport {ApiPromise, WsProvider} from \"@polkadot/api\";\n\n\nexport const getApi = async (selectedNetwork) => {\n\n    const endpoint = getEndpointForNetwork(selectedNetwork);\n\n    const provider = new WsProvider(endpoint);\n    const api = await ApiPromise.create({provider});\n\n    const nodeName = await api.rpc.system.chain();\n\n    console.log(`Connected to node ${nodeName}`);\n    return api;\n}\n","import {getApi} from \"./getApi\";\nimport {web3FromSource} from \"@polkadot/extension-dapp\";\n\nexport const chillNominators = async (statistics, account, nominatorsList,selectedNetwork) => {\n\n    const api = await getApi(selectedNetwork);\n\n    const {chillableAmount} = statistics;\n\n    //createTransactionBatch\n    const transactions = nominatorsList.map(nominator => api.tx.staking.chillOther(nominator));\n\n\n    // if they are higher than `chillableAmount`\n    if (nominatorsList.length > chillableAmount) {\n        nominatorsList.slice(0, chillableAmount - 1);\n    }\n\n\n    const injector = await web3FromSource(account.meta.source);\n\n\n    // return;\n\n    const tx = api.tx.utility.batch(transactions);\n    await tx.signAndSend(account.address, {signer: injector.signer}, ({status}) => {\n        if (status.isInBlock) {\n            console.log(\n                `📀 Transaction ${tx.meta.name} included at blockHash ${status.asInBlock}`\n            );\n        } else if (status.isBroadcast) {\n            console.log(`🚀 Transaction broadcasted.`);\n        } else if (status.isFinalized) {\n            console.log(\n                `💯 Transaction ${tx.meta.name}(..) Finalized at blockHash ${status.asFinalized}`\n            );\n        } else if (status.isReady) {\n            // let's not be too noisy..\n        } else {\n            console.log(`🤷 Other status ${status}`);\n        }\n    });\n\n}\n","export const COLORS = Object.freeze({\n    \"POLKADOT\": \"#E6007A\",\n    \"KUSAMA\": \"#4E4E4E\"\n})\n","import React from \"react\";\n\nexport const NetworkContext = React.createContext(null);\n","import React, {useContext, useState} from \"react\";\nimport Switch from \"react-switch\";\nimport {NominatorsContext} from \"../../context/NominatorsContext\";\nimport {SUPPORTED_NETWORKS} from \"../../utils/setProvider\";\nimport {COLORS} from \"../../constants\";\nimport {NetworkContext} from \"../../context/NetworkContext\";\n\nexport const SortButton = ({}) => {\n    const {selectedNetwork} = useContext(NetworkContext);\n    const {setNominators} = useContext(NominatorsContext);\n\n    const SORT_ORDER = Object.freeze({\n        \"ASC\": false,\n        \"DESC\": true\n    })\n    const [sortOrder, setSortOrder] = useState(SORT_ORDER.ASC)\n\n    const getSortOrderName = () => `${sortOrder === SORT_ORDER.ASC ? \"ASC\" : \"DESC\"}`\n\n    const buttonColor = selectedNetwork === SUPPORTED_NETWORKS.POLKADOT ? COLORS.POLKADOT : COLORS.KUSAMA;\n\n\n    const sortNominators = order => {\n        setSortOrder(order);\n        setNominators(oldState => {\n                const newState = [...oldState];\n                order === SORT_ORDER.ASC ?\n                    newState.sort((a, b) => a.amount > b.amount ? 1 : -1) :\n                    newState.sort((a, b) => a.amount < b.amount ? 1 : -1);\n                return newState;\n            }\n        );\n    }\n\n    return <div className=\"flex items-center \">\n        <p className=\"pr-2 \">{getSortOrderName()}</p>\n        <Switch onChange={sortNominators}\n                onColor={buttonColor}\n                offColor={buttonColor}\n                checked={sortOrder}\n                checkedIcon={false}\n                uncheckedIcon={false}\n        />\n    </div>\n\n}\n","import React from \"react\";\n\nexport const StatisticsContext = React.createContext(null)\n","import React from \"react\";\n\nexport const SelectedAccountContext = React.createContext(null);\n","import {NominatorsContext} from \"../../context/NominatorsContext\";\nimport {SelectedNominatorsContext} from \"../../context/SelectedNominatorsContext\";\nimport React, {useContext} from \"react\";\nimport {Button} from \"../Button\";\nimport {chillNominators} from \"../../utils/chillNominators\";\nimport {SortButton} from \"./SortButton\";\nimport {StatisticsContext} from \"../../context/StatisticsContext\";\nimport {SelectedAccountContext} from \"../../context/SelectedAccountContext\";\nimport {NetworkContext} from \"../../context/NetworkContext\";\nimport {SUPPORTED_NETWORKS} from \"../../utils/setProvider\";\nimport {COLORS} from \"../../constants\";\n\nexport const TableHeader = () => {\n\n    const {nominators, setNominators} = useContext(NominatorsContext);\n    const {selectedNominators} = useContext(SelectedNominatorsContext);\n    const {statistics} = useContext(StatisticsContext);\n    const {selectedAccount} = useContext(SelectedAccountContext);\n    const {selectedNetwork} = useContext(NetworkContext);\n\n    const handleOnClick = () => {\n        chillNominators(statistics, selectedAccount, selectedNominators, selectedNetwork);\n\n    }\n\n    const getButtonName = () => `Chill ${selectedNominators.length}`\n\n    const buttonColor = selectedNetwork === SUPPORTED_NETWORKS.POLKADOT ? COLORS.POLKADOT : COLORS.KUSAMA;\n\n\n    return <div className=\"text-lg\">\n\n        <div className=\"flex justify-between mb-2  p-4  bg-white items-center\">\n            <p className=\"text-2xl \">Nominators ({nominators.length})</p>\n            <div className=\"flex justify-between items-center w-4/12 \">\n                <SortButton/>\n                <Button onClick={handleOnClick} name={getButtonName()} color={buttonColor}/>\n            </div>\n        </div>\n        <div className=\"flex items-center font-bold px-4 py-2 bg-white \">\n            <p className=\"w-1/12 text-left\">Wanna Chill ? </p>\n            <p className=\"w-8/12\">Address</p>\n            <p className=\"w-3/12 text-right  \">Amount</p>\n        </div>\n    </div>\n\n}\n","import React, {useContext} from \"react\";\nimport {SelectedNominatorsContext} from \"../../context/SelectedNominatorsContext\";\nimport {NominatorsContext} from \"../../context/NominatorsContext\";\n\nexport const ChillAllTile = () => {\n    const {selectedNominators, setSelectedNominators} = useContext(SelectedNominatorsContext);\n    const {nominators} = useContext(NominatorsContext);\n\n    const getBackgroundColor = () => \"bg-gray-100\";\n\n    const handleOnChange = (val) => {\n        const isSelected = val.target.checked;\n        setSelectedNominators(_ => isSelected ? [...nominators.map(e => e.address)] : []);\n    }\n\n    return <div className={\"flex justify-between p-2 border-gray-200 border items-center \" + getBackgroundColor()}>\n        <input onChange={(val) => handleOnChange(val)} type=\"checkbox\" className=\"w-1/12 text-left\"/>\n        <p className=\"w-8/12 text-left self-center font-bold\">Chill all nominators</p>\n        <p className=\"mx-4 w-3/12 text-right\"></p>\n    </div>\n}\n","import React from \"react\";\n\nexport const NominatorLoadingState = () =>\n    <div className=\"flex justify-center item-center\">\n        <p>DINO GAME here</p>\n        <p>Nominators are beeing loaded</p>\n    </div>\n\n","import React, {useContext} from \"react\";\nimport {NominatorTile} from \"./NominatorTile\";\nimport {TableHeader} from \"./TableHeader\";\nimport {NominatorsContext} from \"../../context/NominatorsContext\";\nimport {ChillAllTile} from \"./ChillAllTile\";\nimport {NominatorLoadingState} from \"../loadingstates/NominatorLoadingState\";\n\nexport const NominatorTable = ({isLoadingNominators}) => {\n\n    const {nominators, onNominatorsFetched} = useContext(NominatorsContext);\n\n\n    const isEmpty = () => isLoadingNominators === false && nominators.length === 0;\n\n\n    if (isLoadingNominators) {\n\n        return <NominatorLoadingState/>\n    }\n\n    if (isEmpty()) {\n        return <p>Empty</p>\n    }\n\n\n    return <>\n        <TableHeader/>\n        <ChillAllTile/>\n        {nominators.map((nominator, key) => <NominatorTile {...nominator} idx={key} key={nominator.address}/>)}\n    </>\n\n}\n","//provider can be kusama or polkadot\n\n\nexport const fetchNominators = async (api, statistics, onSuccess) => {\n\n    const {nominatorIds, minNominatorBond} = statistics;\n\n    await api.query.staking.bonded\n        .multi(nominatorIds)\n        .then(async (_controllers) => {\n            const controllers = _controllers.map((controller) =>\n                controller.unwrapOrDefault()\n            );\n            await api.query.staking.ledger\n                .multi(controllers)\n                .then(async (_stakes) => {\n                    const nominatorsBelow = _stakes\n                        .map((stake) => stake.unwrapOrDefault())\n                        .filter((item) => item.total.toBn() < minNominatorBond.toNumber())\n                        .map(({stash, total}) => ({\n                            address: stash.toHuman(),\n                            amount: total.toHuman(),\n                        }));\n\n                    onSuccess(nominatorsBelow)\n\n                });\n        });\n\n}\n\n\n","export const fetchStatistics = async (api) => {\n\n\n    const [nominatorKeys, minNominatorBond, maxNominatorsCount, chillThreshold, currentEra] = await Promise.all([\n            api.query.staking.nominators.keys(),\n            api.query.staking.minNominatorBond(),\n            api.query.staking.maxNominatorsCount(),\n            api.query.staking.chillThreshold(),\n            api.query.staking.currentEra(),\n        ],\n    );\n\n    const nominatorIds = nominatorKeys.map(({args: [nominatorId]}) => nominatorId)\n    const threshold = (chillThreshold / 100) * maxNominatorsCount;\n\n    const chillableAmount = nominatorIds.length - threshold;\n\n    // User should not be allowed to chillOther as this is not possible if it is below threshold.\n    //TODO isnt the resulting array of fetch nominators empty if this case happens ?\n    if (nominatorIds.length < threshold) {\n        console.log(`You can\\'t chill others when nominators (${nominatorIds.length}) is below threshold (${threshold})`);\n        return;\n    }\n\n    return {\n        chillableAmount,\n        nominatorIds,\n        threshold,\n        minNominatorBond,\n        currentEra,\n        maxNominatorsCount\n    }\n}\n","import React from \"react\";\n\nexport const Statistic = ({count, name, textColor}) =>\n    <div>\n        <p className={\"text-4xl pb-2 \"}>{count}</p>\n        <p className={\"text-lg text-\" + textColor}>{name}</p>\n    </div>\n\n","import React from \"react\";\nimport {Statistic} from \"./Statistic\";\n\nexport const StatisticsGroup = ({first, second}) => {\n    return <div className=\"gap-8  bg-white border-white rounded-2xl mb-4 p-12 px-16 grid grid-rows-2\">\n        <Statistic {...first}/>\n        <Statistic {...second}/>\n    </div>\n}\n","import React from \"react\";\nimport {StatisticsGroup} from \"./StatisticsGroup\";\n\nexport const StatisticsBox = ({\n                                  chillableAmount,\n                                  nominatorIds,\n                                  threshold,\n                                  minNominatorBond,\n                                  currentEra,\n                                  maxNominatorsCount,\n                                  isLoading,\n                              }) => {\n    const minNominatorBondOrDefault = () =>\n        isLoading ? \"Loading\" : minNominatorBond.toHuman();\n    const nominatorIdsOrDefault = () =>\n        isLoading ? \"Loading\" : nominatorIds.length;\n    const chillableAmountOrDefault = () =>\n        isLoading ? \"Loading\" : chillableAmount;\n    const thresholdOrDefault = () => (isLoading ? \"Loading\" : threshold);\n    const currentEraOrDefault = () =>\n        isLoading ? \"Loading\" : currentEra.toHuman();\n    const maxNominatorsCountOrDefault = () =>\n        isLoading ? \"Loading\" : maxNominatorsCount.toHuman();\n    return (\n        <div className=\"flex justify-between mb-8\">\n            <StatisticsGroup\n                first={{\n                    name: \"Threshold\",\n                    count: thresholdOrDefault(),\n                    textColor: \"red-500\",\n                }}\n                second={{\n                    name: \"Nominator Ids\",\n                    count: nominatorIdsOrDefault(),\n                    textColor: \"red-500\",\n                }}\n            />\n            <div></div>\n            <StatisticsGroup\n                first={{\n                    name: \"Max Chillable Amount\",\n                    count: chillableAmountOrDefault(),\n                    textColor: \"yellow-500\",\n                }}\n                second={{\n                    name: \"Current Era\",\n                    count: currentEraOrDefault(),\n                    textColor: \"yellow-500\",\n                }}\n            />\n            <div></div>\n\n            <StatisticsGroup\n                first={{\n                    name: \"Minimum Nominator Bond\",\n                    count: minNominatorBondOrDefault(),\n                    textColor: \"blue-500\",\n                }}\n                second={{\n                    name: \"Maximum Nominator Count\",\n                    count: maxNominatorsCountOrDefault(),\n                    textColor: \"blue-500\",\n                }}\n            />\n        </div>\n    );\n};\n","/* This example requires Tailwind CSS v2.0+ */\nimport React, {Fragment, useContext, useEffect, useState} from \"react\";\nimport {web3Accounts, web3Enable} from \"@polkadot/extension-dapp\";\nimport {Listbox, Transition} from '@headlessui/react'\nimport {CheckIcon, SelectorIcon} from '@heroicons/react/solid'\nimport {getApi} from \"../utils/getApi\";\nimport {NetworkContext} from \"../context/NetworkContext\";\nimport {SelectedAccountContext} from \"../context/SelectedAccountContext\";\n\n\nfunction classNames(...classes) {\n    return classes.filter(Boolean).join(' ')\n}\n\nexport function ConnectToWallet() {\n    const {selectedNetwork} = useContext(NetworkContext);\n    const {selectedAccount, setSelectedAccount} = useContext(SelectedAccountContext);\n\n    const [accounts, setAccounts] = useState([]);\n    const [balance, setBalance] = useState(\"\");\n\n\n    const startWeb3 = async () => {\n        console.log(\"Fetching Accounts\")\n        const allInjected = await web3Enable('dotsama-chill');\n\n        const allAccounts = await web3Accounts();\n\n        console.log(\"got accounts\")\n\n        setAccounts(allAccounts);\n        setSelectedAccount(allAccounts[0]);\n\n        console.log(selectedAccount)\n\n        fetchBalance(allAccounts[0]);\n\n    }\n\n\n    const handleOnAccountChange = async (newAccount) => {\n        setSelectedAccount(newAccount);\n        fetchBalance(newAccount);\n\n    }\n\n    const fetchBalance = async (account) => {\n        const api = await getApi(selectedNetwork);\n\n        const {data: {free: previousFree}} = await api.query.system.account(account.address);\n        setBalance(previousFree.toHuman());\n    }\n\n    useEffect(() => {\n        startWeb3()\n    }, []);\n\n\n    return (\n\n        accounts.length === 0 ? <p>Please connect Polkadot.js Wallet</p> :\n\n            <div className=\"flex items-center\">\n                <p className=\"pr-4\">{balance}</p>\n                <Listbox value={selectedAccount} onChange={handleOnAccountChange}>\n                    {({open}) => (\n                        <>\n                            <div className=\"mt-1 relative pr-4\">\n                                <Listbox.Button\n                                    className=\"relative w-full bg-white border border-gray-300 rounded-md shadow-sm pl-3 pr-10 py-2 text-left cursor-default focus:outline-none focus:ring-1 focus:ring-black focus:border-black sm:text-sm\">\n              <span className=\"flex items-center\">\n                {/*<img src={selected.avatar} alt=\"\" className=\"flex-shrink-0 h-6 w-6 rounded-full\"/>*/}\n                  <span className=\"ml-3 block truncate\">{selectedAccount.meta.name}</span>\n              </span>\n                                    <span\n                                        className=\"ml-3 absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none\">\n                <SelectorIcon className=\"h-5 w-5 text-gray-400\" aria-hidden=\"true\"/>\n              </span>\n                                </Listbox.Button>\n\n                                <Transition\n                                    show={open}\n                                    as={Fragment}\n                                    leave=\"transition ease-in duration-100\"\n                                    leaveFrom=\"opacity-100\"\n                                    leaveTo=\"opacity-0\"\n                                >\n                                    <Listbox.Options\n                                        className=\"absolute z-10 mt-1 w-full bg-white shadow-lg max-h-56 rounded-md py-1 text-base ring-1 ring-black ring-opacity-5 overflow-auto focus:outline-none sm:text-sm\">\n                                        {accounts.map((account) => (\n                                            <Listbox.Option\n                                                key={account.address}\n                                                className={({active}) =>\n                                                    classNames(\n                                                        active ? 'text-white bg-black' : 'text-gray-900',\n                                                        'cursor-default select-none relative py-2 pl-3 pr-9'\n                                                    )\n                                                }\n                                                value={account}\n                                            >\n                                                {({selected, active}) => (\n                                                    <>\n                                                        <div className=\"flex items-center\">\n                                                            {/*<img src={account.avatar} alt=\"\" className=\"flex-shrink-0 h-6 w-6 rounded-full\"/>*/}\n                                                            <span\n                                                                className={classNames(selected ? 'font-semibold' : 'font-normal', 'ml-3 block truncate')}\n                                                            >\n                            {account.meta.name}\n                          </span>\n                                                        </div>\n\n                                                        {selected ? (\n                                                            <span\n                                                                className={classNames(\n                                                                    active ? 'text-white' : 'text-black',\n                                                                    'absolute inset-y-0 right-0 flex items-center pr-4'\n                                                                )}\n                                                            >\n                            <CheckIcon className=\"h-5 w-5\" aria-hidden=\"true\"/>\n                          </span>\n                                                        ) : null}\n                                                    </>\n                                                )}\n                                            </Listbox.Option>\n                                        ))}\n                                    </Listbox.Options>\n                                </Transition>\n                            </div>\n                        </>\n                    )}\n                </Listbox>\n            </div>\n    )\n}\n","export default __webpack_public_path__ + \"static/media/kusamaLogo.445b5ac3.svg\";","export default __webpack_public_path__ + \"static/media/polkadotLogo.fbd6b0a6.svg\";","import React from \"react\";\nimport KusamaLogo from \"./kusamaLogo.svg\";\nimport PolkadotLogo from \"./polkadotLogo.svg\";\nimport {SUPPORTED_NETWORKS} from \"../../utils/setProvider\";\n\nexport const NetworkLogo = ({network}) => {\n\n    const Logo = network === SUPPORTED_NETWORKS.POLKADOT ? PolkadotLogo : KusamaLogo\n\n    return <div className=\"m-2\">\n        <div className=\"flex items-center\" style={{width: \"30px\", height: \"30px\"}}>\n            < img src={Logo}/>\n        </div>\n    </div>\n}\n","import React, {useContext} from \"react\";\nimport Switch from \"react-switch\";\nimport {SUPPORTED_NETWORKS} from \"../../utils/setProvider\";\nimport {COLORS} from \"../../constants\";\nimport {NetworkContext} from \"../../context/NetworkContext\";\n\n\nimport {NetworkLogo} from \"./NetworkLogo\";\n\nexport const SwitchNetwork = () => {\n\n    const {selectedNetwork, setSelectedNetwork} = useContext(NetworkContext);\n\n    const isChecked = () => selectedNetwork === SUPPORTED_NETWORKS.POLKADOT;\n\n    const onChange = val => val ? setSelectedNetwork(SUPPORTED_NETWORKS.POLKADOT) : setSelectedNetwork(SUPPORTED_NETWORKS.KUSAMA);\n\n    const networkName = selectedNetwork === SUPPORTED_NETWORKS.POLKADOT ? \"Polkadot\" : \"Kusama\";\n\n    return <div className=\"flex items-center \">\n        <NetworkLogo network={SUPPORTED_NETWORKS.KUSAMA}/>\n        <Switch\n            onColor={COLORS.POLKADOT}\n            offColor={COLORS.KUSAMA}\n            checked={isChecked()}\n            onChange={onChange}\n            checkedIcon={false}\n            uncheckedIcon={false}\n        />\n        <NetworkLogo network={SUPPORTED_NETWORKS.POLKADOT}/>\n\n    </div>\n}\n","import {ConnectToWallet} from \"./ConnectToWallet\";\nimport React, {useContext} from \"react\";\nimport {SwitchNetwork} from \"./networkswitch/SwitchNetwork\";\nimport {SelectedAccountContext} from \"../context/SelectedAccountContext\";\nimport {NetworkContext} from \"../context/NetworkContext\";\n\n\nexport const Header = ({}) => {\n    const {selectedAccount, setSelectedAccount} = useContext(SelectedAccountContext);\n    const {selectedNetwork, setSelectedNetwork} = useContext(NetworkContext);\n\n    return <div className=\"flex justify-between items-start pb-6\">\n        <SwitchNetwork selectedNetwork={selectedNetwork} setSelectedNetwork={setSelectedNetwork}/>\n        <ConnectToWallet selectedAccount={selectedAccount}\n                         setSelectedAccount={setSelectedAccount}/>\n    </div>\n}\n","import {NominatorTable} from \"./components/table/NominatorTable\";\nimport {NominatorsContext} from \"./context/NominatorsContext\";\nimport React, {useEffect, useState} from \"react\";\nimport {fetchNominators} from \"./utils/fetchNominators\";\nimport {SUPPORTED_NETWORKS} from \"./utils/setProvider\";\nimport {SelectedNominatorsContext} from \"./context/SelectedNominatorsContext\";\nimport {getApi} from \"./utils/getApi\";\nimport {fetchStatistics} from \"./utils/fetchStatistics\";\nimport {StatisticsContext} from \"./context/StatisticsContext\";\nimport {SelectedAccountContext} from \"./context/SelectedAccountContext\";\nimport {StatisticsBox} from \"./components/statistics/StatisticsBox\";\nimport {NetworkContext} from \"./context/NetworkContext\";\nimport {Header} from \"./components/Header\";\n\nexport const ChillApp = ({}) => {\n\n    const [nominators, setNominators] = useState([]);\n    const [selectedNominators, setSelectedNominators] = useState([]);\n    const [selectedNetwork, setSelectedNetwork] = useState(SUPPORTED_NETWORKS.POLKADOT);\n\n    const [statistics, setStatistics] = useState({\n        chillableAmount: 0,\n        nominatorIds: 0,\n        threshold: 0,\n        minNominatorBond: 0,\n        currentEra: 0,\n        maxNominatorsCount: 0\n    });\n\n    const [selectedAccount, setSelectedAccount] = useState({address: null, meta: {name: null}})\n\n    const [isLoadingNominators, setIsLoadingNominators] = useState(true);\n    const [isLoadingStatistics, setIsLoadingStatistics] = useState(true);\n\n\n    useEffect(() => {\n        setupChillApp();\n    }, [selectedNetwork])\n\n    const setupChillApp = async () => {\n        setIsLoadingNominators(true)\n        setIsLoadingStatistics(true);\n        const api = await getApi(selectedNetwork);\n        const statistics = await fetchStatistics(api);\n\n\n        fetchNominators(api, statistics, onNominatorsFetched);\n        setStatistics(statistics);\n        setIsLoadingStatistics(false)\n\n    }\n\n\n    const onNominatorsFetched = nominatorsList => {\n        nominatorsList.sort((a, b) => a.amount > b.amount ? 1 : -1);\n        setNominators(nominatorsList);\n        setIsLoadingNominators(false);\n    }\n\n\n    return <NominatorsContext.Provider value={{nominators, setNominators}}>\n        <SelectedNominatorsContext.Provider value={{selectedNominators, setSelectedNominators}}>\n            <StatisticsContext.Provider value={{statistics}}>\n                <SelectedAccountContext.Provider value={{selectedAccount, setSelectedAccount}}>\n                    <NetworkContext.Provider value={{selectedNetwork, setSelectedNetwork}}>\n                        <div className=\"px-24 py-8 h-screen\" style={{backgroundColor: \"#f5f3f1\"}}>\n                            <Header/>\n                            <p className=\"text-md pb-6\">A tool to list nominators below threshold and has the option to\n                                chill multiple\n                                nominators in\n                                a batch.</p>\n                            <StatisticsBox {...statistics} isLoading={isLoadingStatistics}/>\n                         <NominatorTable isLoading={isLoadingNominators}/>\n                        </div>\n                    </NetworkContext.Provider>\n                </SelectedAccountContext.Provider>\n            </StatisticsContext.Provider>\n        </SelectedNominatorsContext.Provider>\n    </NominatorsContext.Provider>\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport \"./index.css\";\n\nimport {ChillApp} from \"./ChillApp\";\n\nReactDOM.render(<ChillApp/>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}