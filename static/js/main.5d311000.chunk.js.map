{"version":3,"sources":["context/SelectedNominatorsContext.js","components/table/NominatorTile.jsx","context/NominatorsContext.js","utils/setProvider.js","constants.js","context/NetworkContext.js","components/table/SortButton.jsx","components/Button.js","utils/getApi.js","components/state/BannerState.js","utils/chillNominators.js","context/StatisticsContext.js","context/SelectedAccountContext.js","context/BannerContext.js","components/table/ChillButton.jsx","components/table/TableHeader.jsx","components/table/ChillAllTile.jsx","components/loadingstates/NominatorLoadingState.jsx","components/table/NominatorTable.jsx","utils/fetchNominators.js","utils/fetchStatistics.js","components/statistics/Statistic.jsx","components/statistics/StatisticsGroup.jsx","components/statistics/StatisticsBox.jsx","components/ConnectToWallet.jsx","components/networkswitch/kusamaLogo.svg","components/networkswitch/polkadotLogo.svg","components/networkswitch/NetworkLogo.jsx","components/networkswitch/SwitchNetwork.jsx","components/Header.jsx","components/Banner.jsx","ChillApp.jsx","index.js"],"names":["SelectedNominatorsContext","React","createContext","NominatorTile","address","amount","idx","useContext","selectedNominators","setSelectedNominators","isSelected","includes","className","checked","onChange","oldState","filter","e","type","substring","length","NominatorsContext","getEndpointForNetwork","provider","SUPPORTED_NETWORKS","POLKADOT","KUSAMA","Error","Object","freeze","COLORS","NetworkContext","SortButton","selectedNetwork","setNominators","SORT_ORDER","useState","ASC","sortOrder","setSortOrder","buttonColor","order","newState","sort","a","b","onColor","offColor","checkedIcon","uncheckedIcon","Button","name","onClick","color","undefined","style","borderColor","backgroundColor","getApi","endpoint","WsProvider","ApiPromise","create","api","rpc","system","chain","nodeName","console","log","BANNER_MODES","ON_IS_BROADCAST","ON_IS_IN_BLOCK","ON_IS_FINALIZED","ON_IS_FAILED","ON_IS_KUSAMA","BannerState","isVisible","mode","chillNominators","statistics","account","nominatorsList","showBanner","chillableAmount","transactions","map","nominator","tx","staking","chillOther","slice","web3FromSource","meta","source","injector","utility","batch","signAndSend","signer","status","isInBlock","asInBlock","isBroadcast","isFinalized","asFinalized","isReady","StatisticsContext","SelectedAccountContext","BannerContext","ChillButton","selectedAccount","nominators","chillThreshold","TableHeader","ChillAllTile","val","target","_","handleOnChange","NominatorLoadingState","NominatorTable","isLoading","onNominatorsFetched","key","fetchNominators","onSuccess","nominatorIds","minNominatorBond","nominatorPromises","stash","query","bonded","controller","unwrap","ledger","stake","unwrapOrDefault","total","toBn","Promise","all","allNominatorsRaw","nominatorsBelow","isZero","isNone","toNumber","toHuman","fetchStatistics","keys","maxNominatorsCount","currentEra","nominatorKeys","args","threshold","Statistic","count","textColor","StatisticsGroup","first","second","StatisticsBox","classNames","classes","Boolean","join","ConnectToWallet","setSelectedAccount","accounts","setAccounts","balance","setBalance","setIsLoading","startWeb3","web3Enable","web3Accounts","allAccounts","fetchBalance","handleOnAccountChange","newAccount","previousFree","data","free","useEffect","value","open","show","as","Fragment","leave","leaveFrom","leaveTo","Options","Option","active","selected","NetworkLogo","Logo","network","PolkadotLogo","KusamaLogo","width","height","src","SwitchNetwork","setSelectedNetwork","Header","Banner","bannerState","setBannerState","onTransactionIsInBlock","headline","onTransactionIsBroadcast","onTransactionIsFinalized","onTransactionFailed","onNetworkIsKusama","YELLOW","GREEN","RED","prev","xmlns","fill","viewBox","stroke","d","ChillApp","setStatistics","isLoadingNominators","setIsLoadingNominators","isLoadingStatistics","setIsLoadingStatistics","setupChillApp","Provider","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5d311000.chunk.js","sourcesContent":["import React from \"react\";\n\n//Stores the addresses of nominators the user selected for chilling;\nexport const SelectedNominatorsContext = React.createContext(null);\n","import React, {useContext} from \"react\";\nimport {SelectedNominatorsContext} from \"../../context/SelectedNominatorsContext\";\n\nexport const NominatorTile = ({address, amount, idx}) => {\n\n    const {selectedNominators, setSelectedNominators} = useContext(SelectedNominatorsContext);\n\n    const getBackgroundColor = () => idx % 2 !== 0 ? \"bg-gray-100\" : \"bg-white\";\n\n    const isSelected = () => selectedNominators.includes(address)\n\n    const trimAddress = () => `${address.substring(0, 5)}...${address.substring(address.length - 6, address.length - 1)}`\n\n    const handleOnChange = () => {\n        setSelectedNominators(\n            oldState =>\n                isSelected() ?\n                    oldState.filter(e => e !== address) :\n                    [...oldState, address]\n        );\n    }\n\n\n    return <div className={\"flex justify-between p-2 pr-4 border-gray-200 border items-center \" + getBackgroundColor()}>\n        <input checked={isSelected()} onChange={handleOnChange} type=\"checkbox\"\n               className=\"w-1/12 text-left\"/>\n        <div>\n            <p className=\"w-8/12 text-left self-center\">{trimAddress()}</p>\n        </div>\n        <p className=\"mx-4 w-3/12 text-right\">{amount}</p>\n    </div>\n}\n","import React from \"react\";\n\nexport const NominatorsContext = React.createContext(null)\n","export const getEndpointForNetwork = provider => {\n    switch (provider) {\n        case SUPPORTED_NETWORKS.POLKADOT:\n            return \"wss://rpc.polkadot.io\";\n        case SUPPORTED_NETWORKS.KUSAMA :\n            return \"wss://kusama-rpc.polkadot.io\";\n        default:\n            throw Error(`Unknown Provider ${provider}`);\n    }\n}\n\nexport const SUPPORTED_NETWORKS = Object.freeze({\n    \"POLKADOT\": \"POLKADOT\",\n    \"KUSAMA\": \"KUSAMA\"\n})\n","export const COLORS = Object.freeze({\n    \"POLKADOT\": \"#E6007A\",\n    \"KUSAMA\": \"#4E4E4E\",\n    \"YELLOW\": \"#FCD34D\",\n    \"RED\": \"#EF4444\",\n    \"GREEN\": \"#10B981\"\n})\n","import React from \"react\";\n\nexport const NetworkContext = React.createContext(null);\n","import React, {useContext, useState} from \"react\";\nimport Switch from \"react-switch\";\nimport {NominatorsContext} from \"../../context/NominatorsContext\";\nimport {SUPPORTED_NETWORKS} from \"../../utils/setProvider\";\nimport {COLORS} from \"../../constants\";\nimport {NetworkContext} from \"../../context/NetworkContext\";\n\nexport const SortButton = ({}) => {\n    const {selectedNetwork} = useContext(NetworkContext);\n    const {setNominators} = useContext(NominatorsContext);\n\n    const SORT_ORDER = Object.freeze({\n        \"ASC\": false,\n        \"DESC\": true\n    })\n    const [sortOrder, setSortOrder] = useState(SORT_ORDER.ASC)\n\n    const getSortOrderName = () => `${sortOrder === SORT_ORDER.ASC ? \"ASC\" : \"DESC\"}`\n\n    const buttonColor = selectedNetwork === SUPPORTED_NETWORKS.POLKADOT ? COLORS.POLKADOT : COLORS.KUSAMA;\n\n\n    const sortNominators = order => {\n        setSortOrder(order);\n        setNominators(oldState => {\n                const newState = [...oldState];\n                order === SORT_ORDER.ASC ?\n                    newState.sort((a, b) => a.amount > b.amount ? 1 : -1) :\n                    newState.sort((a, b) => a.amount < b.amount ? 1 : -1);\n                return newState;\n            }\n        );\n    }\n\n    return <div className=\"flex items-center \">\n        <p className=\"pr-2 \">{getSortOrderName()}</p>\n        <Switch onChange={sortNominators}\n                onColor={buttonColor}\n                offColor={buttonColor}\n                checked={sortOrder}\n                checkedIcon={false}\n                uncheckedIcon={false}\n        />\n    </div>\n\n}\n","import React from \"react\";\n\nexport const Button = ({name, onClick, color}) => {\n\n    const buttonColor = color === undefined ? \"#E6007A\" : color;\n    return <button\n        style={{\n            borderColor: buttonColor,\n            backgroundColor: buttonColor\n        }}\n        onClick={onClick}\n        className={`h-full items-center border-2 py-2 px-6  h-fit text-lg text-white tracking-wider font-bold rounded-sm`}>\n        {name}\n    </button>\n}\n\n","import {getEndpointForNetwork} from \"./setProvider\";\nimport {ApiPromise, WsProvider} from \"@polkadot/api\";\n\n\nexport const getApi = async (selectedNetwork) => {\n\n    const endpoint = getEndpointForNetwork(selectedNetwork);\n\n    const provider = new WsProvider(endpoint);\n    const api = await ApiPromise.create({provider});\n\n    const nodeName = await api.rpc.system.chain();\n\n    console.log(`Connected to node ${nodeName}`);\n    return api;\n}\n","export const BANNER_MODES = Object.freeze({\n    ON_IS_BROADCAST: \"broadcast\",\n    ON_IS_IN_BLOCK: \"is-in-block\",\n    ON_IS_FINALIZED: \"is-finalized\",\n    ON_IS_FAILED: \"is-failed\",\n    ON_IS_KUSAMA :\"is-kusama\"\n})\n\nexport const BannerState = {\n    isVisible: false,\n    name: \"\",\n    mode: BANNER_MODES.ON_IS_BROADCAST\n}\nexport const showBanner = ({setBannerState}, mode, name,status) => {\n    setBannerState(prev => ({...prev, isVisible: true, mode, name,status}))\n\n}\n","import {getApi} from \"./getApi\";\nimport {web3FromSource} from \"@polkadot/extension-dapp\";\nimport {BANNER_MODES} from \"../components/state/BannerState\";\n\nexport const chillNominators = async (statistics, account, nominatorsList, selectedNetwork, showBanner) => {\n\n    const api = await getApi(selectedNetwork);\n\n    const {chillableAmount} = statistics;\n\n    //createTransactionBatch\n    const transactions = nominatorsList.map(nominator => api.tx.staking.chillOther(nominator));\n\n\n    // if they are higher than `chillableAmount`\n    if (nominatorsList.length > chillableAmount) {\n        nominatorsList.slice(0, chillableAmount - 1);\n    }\n\n\n    const injector = await web3FromSource(account.meta.source);\n\n\n    // return;\n\n    const tx = api.tx.utility.batch(transactions);\n    await tx.signAndSend(account.address, {signer: injector.signer}, ({status}) => {\n\n        const {name} = tx.meta;\n\n        if (status.isInBlock) {\n            showBanner(BANNER_MODES.ON_IS_IN_BLOCK, name, status.asInBlock);\n            console.log(`📀 Transaction ${name} included at blockHash ${status.asInBlock}`\n            );\n        } else if (status.isBroadcast) {\n            showBanner(BANNER_MODES.ON_IS_BROADCAST);\n            console.log(`🚀 Transaction broadcasted.`);\n        } else if (status.isFinalized) {\n            showBanner(BANNER_MODES.ON_IS_FINALIZED, name, status.asFinalized);\n            console.log(`💯 Transaction ${name}(..) Finalized at blockHash ${status.asFinalized}`\n            );\n        } else if (status.isReady) {\n            // let's not be too noisy..\n        } else {\n            showBanner(BANNER_MODES.ON_IS_FINALIZED, status);\n            console.log(`🤷 Other status ${status}`);\n        }\n    });\n\n}\n","import React from \"react\";\n\nexport const StatisticsContext = React.createContext(null)\n","import React from \"react\";\n\nexport const SelectedAccountContext = React.createContext(null);\n","import React from \"react\";\n\nexport const BannerContext = React.createContext(null)\n","import React, {useContext} from \"react\";\nimport {Button} from \"../Button\";\nimport {chillNominators} from \"../../utils/chillNominators\";\nimport {SUPPORTED_NETWORKS} from \"../../utils/setProvider\";\nimport {COLORS} from \"../../constants\";\nimport {SelectedNominatorsContext} from \"../../context/SelectedNominatorsContext\";\nimport {StatisticsContext} from \"../../context/StatisticsContext\";\nimport {SelectedAccountContext} from \"../../context/SelectedAccountContext\";\nimport {NetworkContext} from \"../../context/NetworkContext\";\nimport {NominatorsContext} from \"../../context/NominatorsContext\";\nimport {BannerContext} from \"../../context/BannerContext\";\nimport {BANNER_MODES} from \"../state/BannerState\";\n\n\nexport const ChillButton = () => {\n    const {selectedNominators} = useContext(SelectedNominatorsContext);\n    const {statistics} = useContext(StatisticsContext);\n    const {selectedAccount} = useContext(SelectedAccountContext);\n    const {selectedNetwork} = useContext(NetworkContext);\n    const {nominators} = useContext(NominatorsContext);\n\n    const {showBanner} = useContext(BannerContext)\n\n\n    const handleOnClick = () => {\n        if (statistics.chillThreshold) {\n            showBanner(BANNER_MODES.ON_IS_KUSAMA);\n            return\n        }\n\n        if (selectedNominators.length === 0) {\n            return;\n        }\n\n\n        chillNominators(statistics, selectedAccount, selectedNominators, selectedNetwork, showBanner);\n\n    }\n\n    const getButtonName = () => `Chill ${selectedNominators.length}`\n\n    const buttonColor = selectedNetwork === SUPPORTED_NETWORKS.POLKADOT ? COLORS.POLKADOT : COLORS.KUSAMA;\n\n\n    return <Button onClick={handleOnClick} name={getButtonName()} color={buttonColor}/>\n\n}\n","import {NominatorsContext} from \"../../context/NominatorsContext\";\nimport React, {useContext} from \"react\";\nimport {SortButton} from \"./SortButton\";\nimport {ChillButton} from \"./ChillButton\";\n\nexport const TableHeader = () => {\n\n    const {nominators} = useContext(NominatorsContext);\n\n\n    return <div className=\"text-lg\">\n\n        <div className=\"flex justify-between mb-2  p-4  bg-white items-center\">\n            <p className=\"text-2xl \">Nominators ({nominators.length})</p>\n            <div className=\"flex justify-between items-center w-4/12 \">\n                <SortButton/>\n                <ChillButton/>\n            </div>\n        </div>\n        <div className=\"flex items-center font-bold px-4 py-2 bg-white \">\n            <p className=\"w-1/12 text-left\">Wanna Chill ? </p>\n            <p className=\"w-8/12\">Address</p>\n            <p className=\"w-3/12 text-right  \">Amount</p>\n        </div>\n    </div>\n\n}\n","import React, {useContext} from \"react\";\nimport {SelectedNominatorsContext} from \"../../context/SelectedNominatorsContext\";\nimport {NominatorsContext} from \"../../context/NominatorsContext\";\n\nexport const ChillAllTile = () => {\n    const {selectedNominators, setSelectedNominators} = useContext(SelectedNominatorsContext);\n    const {nominators} = useContext(NominatorsContext);\n\n    const getBackgroundColor = () => \"bg-gray-100\";\n\n    const handleOnChange = (val) => {\n        const isSelected = val.target.checked;\n        setSelectedNominators(_ => isSelected ? [...nominators.map(e => e.address)] : []);\n    }\n\n    return <div className={\"flex justify-between p-2 border-gray-200 border items-center \" + getBackgroundColor()}>\n        <input onChange={(val) => handleOnChange(val)} type=\"checkbox\" className=\"w-1/12 text-left\"/>\n        <p className=\"w-8/12 text-left self-center font-bold\">Chill all nominators</p>\n        <p className=\"mx-4 w-3/12 text-right\"></p>\n    </div>\n}\n","import React from \"react\";\n\nexport const NominatorLoadingState = () =>\n    <div className=\"flex flex-col justify-center items-center w-full\">\n        <p>Nominators are beeing loaded</p>\n    </div>\n\n","import React, {useContext} from \"react\";\nimport {NominatorTile} from \"./NominatorTile\";\nimport {TableHeader} from \"./TableHeader\";\nimport {NominatorsContext} from \"../../context/NominatorsContext\";\nimport {ChillAllTile} from \"./ChillAllTile\";\nimport {NominatorLoadingState} from \"../loadingstates/NominatorLoadingState\";\n\nexport const NominatorTable = ({isLoading}) => {\n\n    const {nominators, onNominatorsFetched} = useContext(NominatorsContext);\n\n\n    const isEmpty = () => isLoading === false && nominators.length === 0;\n\n\n    if (isLoading) {\n        return <NominatorLoadingState/>\n    }\n\n    if (isEmpty()) {\n        return <p>Empty</p>\n    }\n\n\n    return <>\n        <TableHeader/>\n        <ChillAllTile/>\n        {nominators.map((nominator, key) => <NominatorTile {...nominator} idx={key} key={nominator.address}/>)}\n    </>\n\n}\n","//provider can be kusama or polkadot\n\nexport const fetchNominators = async (api, statistics, onSuccess) => {\n  const { nominatorIds, minNominatorBond } = statistics;\n\n  const nominatorPromises = nominatorIds.map(async (stash) => {\n    const controller = (await api.query.staking.bonded(stash)).unwrap();\n    const ledger = await api.query.staking.ledger(controller);\n    const stake = ledger.unwrapOrDefault().total.toBn();\n    return { controller, stake, ledger };\n  });\n\n  const allNominatorsRaw = await Promise.all(nominatorPromises);\n\n  const nominatorsBelow = allNominatorsRaw\n    .filter(({ controller, stake, ledger }) => {\n      if (stake.isZero() && ledger.isNone) {\n        console.log(\n          `😱 ${controller} seems to have no ledger. This is a state bug.`\n        );\n        return false;\n      } else {\n        return true;\n      }\n    })\n    .filter(({ stake }) => stake < minNominatorBond.toNumber())\n    .map(({ controller, stake }) => ({\n      address: controller.toHuman(),\n      amount: stake.toHuman(),\n    }));\n\n  onSuccess(nominatorsBelow);\n};\n","export const fetchStatistics = async (api) => {\n\n\n    const [nominatorKeys, minNominatorBond, maxNominatorsCount, chillThreshold, currentEra] = await Promise.all([\n            api.query.staking.nominators.keys(),\n            api.query.staking.minNominatorBond(),\n            api.query.staking.maxNominatorsCount(),\n            api.query.staking.chillThreshold(),\n            api.query.staking.currentEra(),\n        ],\n    );\n\n    const nominatorIds = nominatorKeys.map(({args: [nominatorId]}) => nominatorId)\n    const threshold = (chillThreshold / 100) * maxNominatorsCount;\n\n    const chillableAmount = nominatorIds.length - threshold;\n\n    // User should not be allowed to chillOther as this is not possible if it is below threshold.\n    //TODO isnt the resulting array of fetch nominators empty if this case happens ?\n    if (nominatorIds.length < threshold) {\n        console.log(`You can\\'t chill others when nominators (${nominatorIds.length}) is below threshold (${threshold})`);\n        return;\n    }\n\n    return {\n        chillableAmount,\n        nominatorIds,\n        threshold,\n        minNominatorBond,\n        currentEra,\n        maxNominatorsCount,\n        chillThreshold\n    }\n}\n","import React from \"react\";\n\nexport const Statistic = ({count, name, textColor}) =>\n    <div>\n        <p className={\"text-4xl pb-2 \"}>{count}</p>\n        <p className={\"text-lg text-\" + textColor}>{name}</p>\n    </div>\n\n","import React from \"react\";\nimport {Statistic} from \"./Statistic\";\n\nexport const StatisticsGroup = ({first, second}) => {\n    return <div className=\"gap-8  bg-white border-white rounded-2xl mb-4 p-12 px-16 grid grid-rows-2\">\n        <Statistic {...first}/>\n        <Statistic {...second}/>\n    </div>\n}\n","import React from \"react\";\nimport {StatisticsGroup} from \"./StatisticsGroup\";\n\nexport const StatisticsBox = ({\n                                  chillableAmount,\n                                  nominatorIds,\n                                  threshold,\n                                  minNominatorBond,\n                                  currentEra,\n                                  maxNominatorsCount,\n                                  isLoading,\n                              }) => {\n    const minNominatorBondOrDefault = () =>\n        isLoading ? \"Loading\" : minNominatorBond.toHuman();\n    const nominatorIdsOrDefault = () =>\n        isLoading ? \"Loading\" : nominatorIds.length;\n    const chillableAmountOrDefault = () =>\n        isLoading ? \"Loading\" : chillableAmount;\n    const thresholdOrDefault = () => (isLoading ? \"Loading\" : threshold);\n    const currentEraOrDefault = () =>\n        isLoading ? \"Loading\" : currentEra.toHuman();\n    const maxNominatorsCountOrDefault = () =>\n        isLoading ? \"Loading\" : maxNominatorsCount.toHuman();\n    return (\n        <div className=\"flex justify-between mb-8\">\n            <StatisticsGroup\n                first={{\n                    name: \"Nominator Threshold\",\n                    count: thresholdOrDefault(),\n                    textColor: \"red-500\",\n                }}\n                second={{\n                    name: \"Nominator Count\",\n                    count: nominatorIdsOrDefault(),\n                    textColor: \"red-500\",\n                }}\n            />\n            <div></div>\n            <StatisticsGroup\n                first={{\n                    name: \"Max Chillable Amount\",\n                    count: chillableAmountOrDefault(),\n                    textColor: \"yellow-300\",\n                }}\n                second={{\n                    name: \"Current Era\",\n                    count: currentEraOrDefault(),\n                    textColor: \"yellow-300\",\n                }}\n            />\n            <div></div>\n\n            <StatisticsGroup\n                first={{\n                    name: \"Minimum Nominator Bond\",\n                    count: minNominatorBondOrDefault(),\n                    textColor: \"blue-500\",\n                }}\n                second={{\n                    name: \"Maximum Nominator Count\",\n                    count: maxNominatorsCountOrDefault(),\n                    textColor: \"blue-500\",\n                }}\n            />\n        </div>\n    );\n};\n","/* This example requires Tailwind CSS v2.0+ */\nimport React, {Fragment, useContext, useEffect, useState} from \"react\";\nimport {web3Accounts, web3Enable} from \"@polkadot/extension-dapp\";\nimport {Listbox, Transition} from '@headlessui/react'\nimport {CheckIcon, SelectorIcon} from '@heroicons/react/solid'\nimport {getApi} from \"../utils/getApi\";\nimport {NetworkContext} from \"../context/NetworkContext\";\nimport {SelectedAccountContext} from \"../context/SelectedAccountContext\";\n\n\nfunction classNames(...classes) {\n    return classes.filter(Boolean).join(' ')\n}\n\nexport function ConnectToWallet() {\n    const {selectedNetwork} = useContext(NetworkContext);\n    const {selectedAccount, setSelectedAccount} = useContext(SelectedAccountContext);\n\n    const [accounts, setAccounts] = useState([]);\n    const [balance, setBalance] = useState(\"\");\n\n    const [isLoading, setIsLoading] = useState(true);\n\n\n    const startWeb3 = async () => {\n        console.log(\"Fetching Accounts\")\n        setIsLoading(true)\n        const allInjected = await web3Enable('dotsama-chill');\n\n        const allAccounts = await web3Accounts();\n\n        console.log(\"got accounts\")\n\n        setAccounts(allAccounts);\n        setSelectedAccount(allAccounts[0]);\n\n        console.log(selectedAccount)\n\n        await fetchBalance(allAccounts[0]);\n        setIsLoading(false)\n\n\n    }\n\n\n    const handleOnAccountChange = async (newAccount) => {\n        setIsLoading(true)\n        setSelectedAccount(newAccount);\n        await fetchBalance(newAccount);\n        setIsLoading(false)\n\n\n    }\n\n    const fetchBalance = async (account) => {\n        const api = await getApi(selectedNetwork);\n\n        const {data: {free: previousFree}} = await api.query.system.account(account.address);\n        setBalance(previousFree.toHuman());\n    }\n\n    useEffect(() => {\n        startWeb3()\n    }, []);\n\n\n    return (\n\n        accounts.length === 0 ? <p>Please connect Polkadot.js Wallet</p> :\n\n            <div className=\"flex items-center\">\n                {<p className=\"pr-4\">{isLoading ? \"Fetching...\" : balance}</p>}\n                <Listbox value={selectedAccount} onChange={handleOnAccountChange}>\n                    {({open}) => (\n                        <>\n                            <div className=\"mt-1 relative pr-4\">\n                                <Listbox.Button\n                                    className=\"relative w-full bg-white border border-gray-300 rounded-md shadow-sm pl-3 pr-10 py-2 text-left cursor-default focus:outline-none focus:ring-1 focus:ring-black focus:border-black sm:text-sm\">\n              <span className=\"flex items-center\">\n                {/*<img src={selected.avatar} alt=\"\" className=\"flex-shrink-0 h-6 w-6 rounded-full\"/>*/}\n                  <span className=\"ml-3 block truncate\">{selectedAccount.meta.name}</span>\n              </span>\n                                    <span\n                                        className=\"ml-3 absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none\">\n                <SelectorIcon className=\"h-5 w-5 text-gray-400\" aria-hidden=\"true\"/>\n              </span>\n                                </Listbox.Button>\n\n                                <Transition\n                                    show={open}\n                                    as={Fragment}\n                                    leave=\"transition ease-in duration-100\"\n                                    leaveFrom=\"opacity-100\"\n                                    leaveTo=\"opacity-0\"\n                                >\n                                    <Listbox.Options\n                                        className=\"absolute z-10 mt-1 w-full bg-white shadow-lg max-h-56 rounded-md py-1 text-base ring-1 ring-black ring-opacity-5 overflow-auto focus:outline-none sm:text-sm\">\n                                        {accounts.map((account) => (\n                                            <Listbox.Option\n                                                key={account.address}\n                                                className={({active}) =>\n                                                    classNames(\n                                                        active ? 'text-white bg-black' : 'text-gray-900',\n                                                        'cursor-default select-none relative py-2 pl-3 pr-9'\n                                                    )\n                                                }\n                                                value={account}\n                                            >\n                                                {({selected, active}) => (\n                                                    <>\n                                                        <div className=\"flex items-center\">\n                                                            {/*<img src={account.avatar} alt=\"\" className=\"flex-shrink-0 h-6 w-6 rounded-full\"/>*/}\n                                                            <span\n                                                                className={classNames(selected ? 'font-semibold' : 'font-normal', 'ml-3 block truncate')}\n                                                            >\n                            {account.meta.name}\n                          </span>\n                                                        </div>\n\n                                                        {selected ? (\n                                                            <span\n                                                                className={classNames(\n                                                                    active ? 'text-white' : 'text-black',\n                                                                    'absolute inset-y-0 right-0 flex items-center pr-4'\n                                                                )}\n                                                            >\n                            <CheckIcon className=\"h-5 w-5\" aria-hidden=\"true\"/>\n                          </span>\n                                                        ) : null}\n                                                    </>\n                                                )}\n                                            </Listbox.Option>\n                                        ))}\n                                    </Listbox.Options>\n                                </Transition>\n                            </div>\n                        </>\n                    )}\n                </Listbox>\n            </div>\n    )\n}\n","export default __webpack_public_path__ + \"static/media/kusamaLogo.445b5ac3.svg\";","export default __webpack_public_path__ + \"static/media/polkadotLogo.fbd6b0a6.svg\";","import React from \"react\";\nimport KusamaLogo from \"./kusamaLogo.svg\";\nimport PolkadotLogo from \"./polkadotLogo.svg\";\nimport {SUPPORTED_NETWORKS} from \"../../utils/setProvider\";\n\nexport const NetworkLogo = ({network}) => {\n\n    const Logo = network === SUPPORTED_NETWORKS.POLKADOT ? PolkadotLogo : KusamaLogo\n\n    return <div className=\"m-2\">\n        <div className=\"flex items-center\" style={{width: \"30px\", height: \"30px\"}}>\n            < img src={Logo}/>\n        </div>\n    </div>\n}\n","import React, {useContext} from \"react\";\nimport Switch from \"react-switch\";\nimport {SUPPORTED_NETWORKS} from \"../../utils/setProvider\";\nimport {COLORS} from \"../../constants\";\nimport {NetworkContext} from \"../../context/NetworkContext\";\n\n\nimport {NetworkLogo} from \"./NetworkLogo\";\n\nexport const SwitchNetwork = () => {\n\n    const {selectedNetwork, setSelectedNetwork} = useContext(NetworkContext);\n\n    const isChecked = () => selectedNetwork === SUPPORTED_NETWORKS.POLKADOT;\n\n    const onChange = val => val ? setSelectedNetwork(SUPPORTED_NETWORKS.POLKADOT) : setSelectedNetwork(SUPPORTED_NETWORKS.KUSAMA);\n\n    const networkName = selectedNetwork === SUPPORTED_NETWORKS.POLKADOT ? \"Polkadot\" : \"Kusama\";\n\n    return <div className=\"flex items-center \">\n        <NetworkLogo network={SUPPORTED_NETWORKS.KUSAMA}/>\n        <Switch\n            onColor={COLORS.POLKADOT}\n            offColor={COLORS.KUSAMA}\n            checked={isChecked()}\n            onChange={onChange}\n            checkedIcon={false}\n            uncheckedIcon={false}\n        />\n        <NetworkLogo network={SUPPORTED_NETWORKS.POLKADOT}/>\n\n    </div>\n}\n","import {ConnectToWallet} from \"./ConnectToWallet\";\nimport React, {useContext} from \"react\";\nimport {SwitchNetwork} from \"./networkswitch/SwitchNetwork\";\nimport {SelectedAccountContext} from \"../context/SelectedAccountContext\";\nimport {NetworkContext} from \"../context/NetworkContext\";\n\n\nexport const Header = ({}) => {\n    const {selectedAccount, setSelectedAccount} = useContext(SelectedAccountContext);\n    const {selectedNetwork, setSelectedNetwork} = useContext(NetworkContext);\n\n    return <div className=\"flex justify-between items-start pb-6\">\n        <SwitchNetwork selectedNetwork={selectedNetwork} setSelectedNetwork={setSelectedNetwork}/>\n        <ConnectToWallet selectedAccount={selectedAccount}\n                         setSelectedAccount={setSelectedAccount}/>\n    </div>\n}\n","import React from \"react\"\nimport {BANNER_MODES} from \"./state/BannerState\";\nimport {COLORS} from \"../constants\";\n\nexport const Banner = ({bannerState, setBannerState}) => {\n    const onTransactionIsInBlock = {\n        headline: `📀 Transaction ${bannerState.name} included at blockHash ${bannerState.status}`,\n        color: \"bg-black-400\"\n\n    }\n\n    const onTransactionIsBroadcast = {\n        headline: `🚀 Transaction broadcasted.`,\n        color: \"bg-yellow-400\"\n    }\n    const onTransactionIsFinalized = {\n        headline: `💯 Transaction ${bannerState.name}(..) Finalized at blockHash ${bannerState.status}`,\n        color: \"bg-green-400\"\n    }\n    const onTransactionFailed = {\n        headline: `🤷 Other status ${bannerState.name}`,\n        color: \"bg-red-400\"\n    }\n\n    const onNetworkIsKusama = {\n        headline: `Chilling on Kusama is currently not possible since there is no threshold set for chilling`,\n        color: \"bg-red-400\"\n    }\n\n    const headline = () => {\n        switch (bannerState.mode) {\n            case BANNER_MODES.ON_IS_IN_BLOCK:\n                return onTransactionIsInBlock.headline\n            case BANNER_MODES.ON_IS_BROADCAST:\n                return onTransactionIsBroadcast.headline\n            case BANNER_MODES.ON_IS_FINALIZED:\n                return onTransactionIsFinalized.headline\n            case BANNER_MODES.ON_IS_FAILED:\n                return onTransactionFailed.headline\n            case BANNER_MODES.ON_IS_KUSAMA:\n                return onNetworkIsKusama.headline\n\n            default:\n                return \"\"\n        }\n    }\n\n    const color = () => {\n        switch (bannerState.mode) {\n            case BANNER_MODES.ON_IS_IN_BLOCK:\n                return COLORS.POLKADOT\n            case BANNER_MODES.ON_IS_BROADCAST:\n                return COLORS.YELLOW\n            case BANNER_MODES.ON_IS_FINALIZED:\n                return COLORS.GREEN\n            case BANNER_MODES.ON_IS_FAILED:\n                return COLORS.RED\n            case BANNER_MODES.ON_IS_KUSAMA:\n                return COLORS.RED\n            default:\n                return \"\"\n        }\n    }\n\n    return (\n        bannerState.isVisible &&\n        <div style={{backgroundColor: color()}} className=\" w-3/6  border rounded-2xl absolute top-5 right-10 z-50\">\n            <div className=\"py-3 px-3 \">\n                <div className=\"flex items-center justify-between flex-wrap\">\n                    <div className=\"w-0 flex-1 flex items-center\">\n\n                        <p className=\"ml-3 font-medium text-white \">\n                            {headline()}\n                        </p>\n                    </div>\n\n                    <div className=\"order-2 flex-shrink-0 sm:order-3 sm:ml-3\">\n                        <button\n                            onClick={() => setBannerState(prev => ({...prev, isVisible: false}))}\n                            type=\"button\"\n\n                            className=\"-mr-1 flex p-2 rounded-md  focus:outline-none focus:ring-2 focus:ring-white sm:-mr-2\">\n                            <span\n                                className=\"sr-only\">Dismiss</span>\n                            <svg className=\"h-6 w-6 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\"\n                                 viewBox=\"0 0 24 24\" stroke=\"currentColor\" aria-hidden=\"true\">\n                                <path\n                                    d=\"M6 18L18 6M6 6l12 12\"/>\n                            </svg>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n","import {NominatorTable} from \"./components/table/NominatorTable\";\nimport {NominatorsContext} from \"./context/NominatorsContext\";\nimport React, {useEffect, useState} from \"react\";\nimport {fetchNominators} from \"./utils/fetchNominators\";\nimport {SUPPORTED_NETWORKS} from \"./utils/setProvider\";\nimport {SelectedNominatorsContext} from \"./context/SelectedNominatorsContext\";\nimport {getApi} from \"./utils/getApi\";\nimport {fetchStatistics} from \"./utils/fetchStatistics\";\nimport {StatisticsContext} from \"./context/StatisticsContext\";\nimport {SelectedAccountContext} from \"./context/SelectedAccountContext\";\nimport {StatisticsBox} from \"./components/statistics/StatisticsBox\";\nimport {NetworkContext} from \"./context/NetworkContext\";\nimport {Header} from \"./components/Header\";\nimport {BannerState, showBanner} from \"./components/state/BannerState\";\nimport {BannerContext} from \"./context/BannerContext\";\nimport {Banner} from \"./components/Banner\";\n\nexport const ChillApp = ({}) => {\n\n    const [nominators, setNominators] = useState([]);\n    const [selectedNominators, setSelectedNominators] = useState([]);\n    const [selectedNetwork, setSelectedNetwork] = useState(SUPPORTED_NETWORKS.POLKADOT);\n\n    const [statistics, setStatistics] = useState({\n        chillableAmount: 0,\n        nominatorIds: 0,\n        threshold: 0,\n        minNominatorBond: 0,\n        currentEra: 0,\n        maxNominatorsCount: 0\n    });\n\n    const [selectedAccount, setSelectedAccount] = useState({address: null, meta: {name: null}})\n\n    const [isLoadingNominators, setIsLoadingNominators] = useState(true);\n    const [isLoadingStatistics, setIsLoadingStatistics] = useState(true);\n\n    const [bannerState, setBannerState] = useState({...BannerState})\n\n\n    useEffect(() => {\n\n        setupChillApp();\n    }, [selectedNetwork])\n\n    const setupChillApp = async () => {\n        setIsLoadingNominators(true)\n        setIsLoadingStatistics(true);\n        const api = await getApi(selectedNetwork);\n        const statistics = await fetchStatistics(api);\n\n\n        fetchNominators(api, statistics, onNominatorsFetched);\n        setStatistics(statistics);\n        setIsLoadingStatistics(false)\n\n    }\n\n\n    const onNominatorsFetched = nominatorsList => {\n        nominatorsList.sort((a, b) => a.amount > b.amount ? 1 : -1);\n        setNominators(nominatorsList);\n        setIsLoadingNominators(false);\n    }\n\n\n    return <NominatorsContext.Provider value={{nominators, setNominators}}>\n        <SelectedNominatorsContext.Provider value={{selectedNominators, setSelectedNominators}}>\n            <StatisticsContext.Provider value={{statistics}}>\n                <SelectedAccountContext.Provider value={{selectedAccount, setSelectedAccount}}>\n                    <NetworkContext.Provider value={{selectedNetwork, setSelectedNetwork}}>\n                        <BannerContext.Provider\n                            value={{showBanner: (mode, name,status) => showBanner({setBannerState}, mode, name,status)}}>\n                            <Banner bannerState={bannerState} setBannerState={setBannerState}/>\n                            <div className=\"px-24 py-8 h-screen\" style={{backgroundColor: \"#f5f3f1\"}}>\n                                <Header/>\n                                <p className=\"text-md pb-6\">A tool to list nominators below threshold and has the option\n                                    to\n                                    chill multiple\n                                    nominators in\n                                    a batch.</p>\n                                <StatisticsBox {...statistics} isLoading={isLoadingStatistics}/>\n                                <NominatorTable isLoading={isLoadingNominators}/>\n                            </div>\n                        </BannerContext.Provider>\n                    </NetworkContext.Provider>\n                </SelectedAccountContext.Provider>\n            </StatisticsContext.Provider>\n        </SelectedNominatorsContext.Provider>\n    </NominatorsContext.Provider>\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport \"./index.css\";\n\nimport {ChillApp} from \"./ChillApp\";\n\nReactDOM.render(<ChillApp/>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}