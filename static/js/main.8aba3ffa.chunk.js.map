{"version":3,"sources":["config/index.js","substrate-lib/SubstrateContext.js","context/SelectedNominatorsContext.js","components/table/NominatorTile.jsx","context/NominatorsContext.js","components/Button.js","utils/setProvider.js","utils/getApi.js","utils/chillNominators.js","components/table/SortButton.jsx","context/StatisticsContext.js","context/SelectedAccountContext.js","components/table/TableHeader.jsx","components/table/ChillAllTile.jsx","components/table/NominatorTable.jsx","components/LoadingState.js","utils/fetchNominators.js","components/ConnectToWallet.jsx","utils/fetchStatistics.js","components/statistics/Statistic.jsx","components/statistics/StatisticsGroup.jsx","components/statistics/StatisticsBox.jsx","ChillApp.jsx","index.js"],"names":["configEnv","require","types","envVars","reduce","mem","n","undefined","process","slice","config","configCommon","connectedSocket","queryString","parse","window","location","search","rpc","PROVIDER_SOCKET","console","log","jsonrpc","RPC","SelectedNominatorsContext","React","createContext","NominatorTile","address","amount","idx","useContext","selectedNominators","setSelectedNominators","isSelected","includes","className","checked","onChange","oldState","filter","e","type","substring","length","NominatorsContext","Button","name","onClick","color","buttonColor","style","borderColor","backgroundColor","getEndpointForNetwork","provider","SUPPORTED_NETWORKS","POLKADOT","Error","Object","freeze","_api","getApi","a","endpoint","WsProvider","ApiPromise","create","api","system","chain","nodeName","chillNominators","statistics","account","nominatorsList","chillableAmount","transactions","map","nominator","tx","staking","chillOther","web3FromSource","meta","source","injector","utility","batch","signAndSend","signer","status","isInBlock","asInBlock","isBroadcast","isFinalized","asFinalized","isReady","SortButton","setNominators","SORT_ORDER","useState","ASC","sortOrder","setSortOrder","order","newState","sort","b","onColor","offColor","checkedIcon","uncheckedIcon","StatisticsContext","SelectedAccountContext","TableHeader","nominators","selectedAccount","ChillAllTile","val","target","_","handleOnChange","NominatorTable","onNominatorsFetched","key","LoadingState","fetchNominators","onSuccess","nominatorIds","minNominatorBond","query","bonded","multi","then","_controllers","controllers","controller","unwrapOrDefault","ledger","_stakes","nominatorsBelow","stake","item","total","toBn","toNumber","stash","toHuman","classNames","classes","Boolean","join","ConnectToWallet","setSelectedAccount","accounts","setAccounts","balance","setBalance","startWeb3","web3Enable","web3Accounts","allAccounts","fetchBalance","handleOnAccountChange","newAccount","previousFree","data","free","useEffect","value","open","show","as","Fragment","leave","leaveFrom","leaveTo","Options","Option","active","selected","fetchStatistics","Promise","all","keys","maxNominatorsCount","chillThreshold","nominatorKeys","args","threshold","Statistic","count","textColor","StatisticsGroup","first","second","StatisticsBox","ChillApp","setStatistics","isLoading","setIsLoading","setupChillApp","Provider","ReactDOM","render","document","getElementById"],"mappings":"gzBAEMA,EAAYC,EAAQ,KACpBC,EAAQD,EAAQ,KAOhBE,EAJc,CAClB,4BACA,iCAE0BC,QAAO,SAACC,EAAKC,GAGvC,YADuBC,IAAnBC,iJAAYF,KAAkBD,EAAIC,EAAEG,MAAM,KAAOD,iJAAYF,IAC1DD,IACN,IAGYK,EADH,mDAAQC,GAAiBX,GAAcG,GAAvC,IAAgDD,U,OCJtDU,EADcC,IAAYC,MAAMC,OAAOC,SAASC,QAClBC,KAAOR,EAAOS,gBAClDC,QAAQC,IAAR,4BAAiCT,IAOvB,2BAAMU,KAAYZ,EAAOa,KAC1Bb,EAAOR,MAHhB,I,6HCfasB,EAA4BC,IAAMC,cAAc,MCAhDC,EAAgB,SAAC,GAA4B,IAA3BC,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,OAAQC,EAAS,EAATA,IAE5C,EAAoDC,qBAAWP,GAAxDQ,EAAP,EAAOA,mBAAoBC,EAA3B,EAA2BA,sBAIrBC,EAAa,kBAAMF,EAAmBG,SAASP,IAcrD,OAAO,sBAAKQ,UAAW,sEAhBUN,EAAM,IAAM,EAAI,cAAgB,YAgB1D,UACH,uBAAOO,QAASH,IAAcI,SAXX,WACnBL,GACI,SAAAM,GAAQ,OACJL,IACIK,EAASC,QAAO,SAAAC,GAAC,OAAIA,IAAMb,KADrB,sBAEFW,GAFE,CAEQX,QAM8Bc,KAAK,WACtDN,UAAU,qBACjB,8BACI,mBAAGA,UAAU,+BAAb,SAhBY,UAASR,EAAQe,UAAU,EAAG,GAA9B,cAAsCf,EAAQe,UAAUf,EAAQgB,OAAS,EAAGhB,EAAQgB,OAAS,QAkB7G,mBAAGR,UAAU,yBAAb,SAAuCP,QC3BlCgB,EAAoBpB,IAAMC,cAAc,MCAxCoB,EAAS,SAAC,GAA4B,IAA3BC,EAA0B,EAA1BA,KAAMC,EAAoB,EAApBA,QAASC,EAAW,EAAXA,MAE7BC,OAAwB3C,IAAV0C,EAAsB,UAAYA,EACtD,OAAO,wBACHE,MAAO,CACHC,YAAaF,EACbG,gBAAiBH,GAErBF,QAASA,EACTZ,UAAS,uGANN,SAOFW,KCZIO,EAAwB,SAAAC,GACjC,OAAQA,GACJ,KAAKC,EAAmBC,SACpB,MAAO,wBAGX,QACI,MAAMC,MAAM,oBAAD,OAAqBH,MAI/BC,EAAqBG,OAAOC,OAAO,CAC5C,SAAY,aCRZC,EAAO,KAEEC,EAAM,uCAAG,kCAAAC,EAAA,yDAGL,OAATF,EAHc,uBAIdzC,QAAQC,IAAI,oCAJE,kBAKPwC,GALO,cAQZG,EAAWV,EAAsBE,EAAmBC,UAEpDF,EAAW,IAAIU,IAAWD,GAVd,SAWAE,IAAWC,OAAO,CAACZ,aAXnB,cAWZa,EAXY,iBAaKA,EAAIlD,IAAImD,OAAOC,QAbpB,eAaZC,EAbY,OAelBnD,QAAQC,IAAR,4BAAiCkD,IAEjCV,EAAOO,EAjBW,kBAkBXP,GAlBW,4CAAH,qDCHNW,EAAe,uCAAG,WAAOC,EAAYC,EAASC,GAA5B,uBAAAZ,EAAA,sEAETD,IAFS,cAErBM,EAFqB,OAIpBQ,EAAmBH,EAAnBG,gBAGDC,EAAeF,EAAeG,KAAI,SAAAC,GAAS,OAAIX,EAAIY,GAAGC,QAAQC,WAAWH,MAI3EJ,EAAe/B,OAASgC,GACxBD,EAAelE,MAAM,EAAGmE,EAAkB,GAZnB,SAgBJO,YAAeT,EAAQU,KAAKC,QAhBxB,cAgBrBC,EAhBqB,OAkB3BlE,QAAQC,IAAI,mBAAoBwD,EAAajC,QAE7CxB,QAAQC,IAAI,aAGZD,QAAQC,IAAIsD,GACZvD,QAAQC,IAAIwD,GAKNG,EAAKZ,EAAIY,GAAGO,QAAQC,MAAMX,GA7BL,UA8BrBG,EAAGS,YAAYf,EAAQ9C,QAAS,CAAC8D,OAAQJ,EAASI,SAAS,YAAe,IAAbC,EAAY,EAAZA,OAC3DA,EAAOC,UACPxE,QAAQC,IAAR,mCACsB2D,EAAGI,KAAKrC,KAD9B,kCAC4D4C,EAAOE,YAE5DF,EAAOG,YACd1E,QAAQC,IAAR,yCACOsE,EAAOI,YACd3E,QAAQC,IAAR,mCACsB2D,EAAGI,KAAKrC,KAD9B,uCACiE4C,EAAOK,cAEjEL,EAAOM,SAGd7E,QAAQC,IAAR,oCAA+BsE,OA5CZ,4CAAH,0D,kBCCfO,EAAa,SAAC,GAAQ,eAG/B,IAAOC,EAAiBpE,qBAAWc,GAA5BsD,cAEDC,EAAazC,OAAOC,OAAO,CAC7B,KAAO,EACP,MAAQ,IAEZ,EAAkCyC,mBAASD,EAAWE,KAAtD,mBAAOC,EAAP,KAAkBC,EAAlB,KAiBA,OAAO,sBAAKpE,UAAU,qBAAf,UACH,mBAAGA,UAAU,QAAb,SAhBqB,UAASmE,IAAcH,EAAWE,IAAM,MAAQ,UAiBrE,cAAC,IAAD,CAAQhE,SAfW,SAAAmE,GACnBD,EAAaC,GACbN,GAAc,SAAA5D,GACN,IAAMmE,EAAQ,YAAOnE,GAKrB,OAJAkE,IAAUL,EAAWE,IACjBI,EAASC,MAAK,SAAC5C,EAAG6C,GAAJ,OAAU7C,EAAElC,OAAS+E,EAAE/E,OAAS,GAAK,KACnD6E,EAASC,MAAK,SAAC5C,EAAG6C,GAAJ,OAAU7C,EAAElC,OAAS+E,EAAE/E,OAAS,GAAK,KAEhD6E,MAQPG,QAAQ,UACRC,SAAS,UACTzE,QAASkE,EACTQ,aAAa,EACbC,eAAe,QCnClBC,G,cAAoBxF,IAAMC,cAAc,OCAxCwF,EAAyBzF,IAAMC,cAAc,MCS7CyF,EAAc,WAEvB,MAAoCpF,qBAAWc,GAAxCuE,EAAP,EAAOA,WACApF,GADP,EAAmBmE,cACUpE,qBAAWP,GAAjCQ,oBACAyC,EAAc1C,qBAAWkF,GAAzBxC,WACA4C,EAAmBtF,qBAAWmF,GAA9BG,gBAUP,OAAO,sBAAKjF,UAAU,UAAf,UAEH,sBAAKA,UAAU,wDAAf,UACI,oBAAGA,UAAU,YAAb,yBAAsCgF,EAAWxE,OAAjD,OACA,sBAAKR,UAAU,4CAAf,UACI,cAAC,EAAD,IACA,cAAC,EAAD,CAAQY,QAdE,WAClBwB,EAAgBC,EAAY4C,EAAiBrF,IAaLe,KATtB,gBAAef,EAAmBY,gBAYpD,sBAAKR,UAAU,kDAAf,UACI,mBAAGA,UAAU,mBAAb,4BACA,mBAAGA,UAAU,SAAb,qBACA,mBAAGA,UAAU,sBAAb,2BClCCkF,EAAe,WACxB,MAAoDvF,qBAAWP,GAApCS,GAA3B,EAAOD,mBAAP,EAA2BC,uBACpBmF,EAAcrF,qBAAWc,GAAzBuE,WASP,OAAO,sBAAKhF,UAAW,2EAAhB,UACH,uBAAOE,SAAU,SAACiF,GAAD,OANE,SAACA,GACpB,IAAMrF,EAAaqF,EAAIC,OAAOnF,QAC9BJ,GAAsB,SAAAwF,GAAC,OAAIvF,EAAU,YAAOkF,EAAWtC,KAAI,SAAArC,GAAC,OAAIA,EAAEb,YAAY,MAIpD8F,CAAeH,IAAM7E,KAAK,WAAWN,UAAU,qBACzE,mBAAGA,UAAU,yCAAb,kCACA,mBAAGA,UAAU,+BCZRuF,EAAiB,WAE1B,MAA0C5F,qBAAWc,GAA9CuE,EAAP,EAAOA,WAAP,EAAmBQ,oBAGnB,OAAO,gCACH,cAAC,EAAD,IACA,cAAC,EAAD,IACCR,EAAWtC,KAAI,SAACC,EAAW8C,GAAZ,OAAoB,wBAAC,EAAD,2BAAmB9C,GAAnB,IAA8BjD,IAAK+F,EAAKA,IAAK9C,EAAUnD,kBCXtFkG,EAAe,kBAAM,gECArBC,EAAe,uCAAG,WAAO3D,EAAKK,EAAYuD,GAAxB,iBAAAjE,EAAA,6DAEpBkE,EAAkCxD,EAAlCwD,aAAcC,EAAoBzD,EAApByD,iBAFM,SAIrB9D,EAAI+D,MAAMlD,QAAQmD,OACnBC,MAAMJ,GACNK,KAFC,+BAAAvE,EAAA,MAEI,WAAOwE,GAAP,eAAAxE,EAAA,6DACIyE,EAAcD,EAAazD,KAAI,SAAC2D,GAAD,OACjCA,EAAWC,qBAFb,SAIItE,EAAI+D,MAAMlD,QAAQ0D,OACnBN,MAAMG,GACNF,KAFC,+BAAAvE,EAAA,MAEI,WAAO6E,GAAP,eAAA7E,EAAA,sDACI8E,EAAkBD,EACnB9D,KAAI,SAACgE,GAAD,OAAWA,EAAMJ,qBACrBlG,QAAO,SAACuG,GAAD,OAAUA,EAAKC,MAAMC,OAASf,EAAiBgB,cACtDpE,KAAI,gBAAEqE,EAAF,EAAEA,MAAOH,EAAT,EAASA,MAAT,MAAqB,CACtBpH,QAASuH,EAAMC,UACfvH,OAAQmH,EAAMI,cAGtBpB,EAAUa,GATR,2CAFJ,uDAJJ,2CAFJ,uDAJqB,2CAAH,0D,2BCK5B,SAASQ,IAAwB,IAAD,uBAATC,EAAS,yBAATA,EAAS,gBAC5B,OAAOA,EAAQ9G,OAAO+G,SAASC,KAAK,KAGjC,SAASC,EAAT,GAAiE,IAAvCpC,EAAsC,EAAtCA,gBAAiBqC,EAAqB,EAArBA,mBAC9C,EAAgCrD,mBAAS,IAAzC,mBAAOsD,EAAP,KAAiBC,EAAjB,KACA,EAA8BvD,mBAAS,IAAvC,mBAAOwD,EAAP,KAAgBC,EAAhB,KAGMC,EAAS,uCAAG,4BAAAhG,EAAA,sEACYiG,YAAW,iBADvB,8BAGYC,cAHZ,OAGRC,EAHQ,OAMdN,EAAYM,GACZR,EAAmBQ,EAAY,IAE/BC,EAAaD,EAAY,IATX,2CAAH,qDAcTE,EAAqB,uCAAG,WAAOC,GAAP,SAAAtG,EAAA,sDAC1B2F,EAAmBW,GACnBF,EAAaE,GAFa,2CAAH,sDAMrBF,EAAY,uCAAG,WAAOzF,GAAP,mBAAAX,EAAA,sEACCD,IADD,cACXM,EADW,gBAG0BA,EAAI+D,MAAM9D,OAAOK,QAAQA,EAAQ9C,SAH3D,gBAGG0I,EAHH,EAGVC,KAAOC,KACdV,EAAWQ,EAAalB,WAJP,2CAAH,sDAYlB,OALAqB,qBAAU,WACNV,MACD,IAKqB,IAApBJ,EAAS/G,OAAe,kEAEpB,sBAAKR,UAAU,oBAAf,UACI,mBAAGA,UAAU,OAAb,SAAqByH,IACrB,cAAC,IAAD,CAASa,MAAOrD,EAAiB/E,SAAU8H,EAA3C,SACK,gBAAEO,EAAF,EAAEA,KAAF,OACG,mCACI,sBAAKvI,UAAU,qBAAf,UACI,eAAC,IAAQU,OAAT,CACIV,UAAU,+LADd,UAElB,sBAAMA,UAAU,oBAAhB,SAEI,sBAAMA,UAAU,sBAAhB,SAAuCiF,EAAgBjC,KAAKrC,SAE1C,sBACIX,UAAU,6EADd,SAEpB,cAAC,IAAD,CAAcA,UAAU,wBAAwB,cAAY,cAI5C,cAAC,IAAD,CACIwI,KAAMD,EACNE,GAAIC,WACJC,MAAM,kCACNC,UAAU,cACVC,QAAQ,YALZ,SAOI,cAAC,IAAQC,QAAT,CACI9I,UAAU,+JADd,SAEKuH,EAAS7E,KAAI,SAACJ,GAAD,OACV,cAAC,IAAQyG,OAAT,CAEI/I,UAAW,mBACPiH,EADO,EAAE+B,OAEI,sBAAwB,gBACjC,uDAGRV,MAAOhG,EARX,SAUK,gBAAE2G,EAAF,EAAEA,SAAUD,EAAZ,EAAYA,OAAZ,OACG,qCACI,qBAAKhJ,UAAU,oBAAf,SAEI,sBACIA,UAAWiH,EAAWgC,EAAW,gBAAkB,cAAe,uBADtE,SAG/B3G,EAAQU,KAAKrC,SAIesI,EACG,sBACIjJ,UAAWiH,EACP+B,EAAS,aAAe,aACxB,qDAHR,SAMhC,cAAC,IAAD,CAAWhJ,UAAU,UAAU,cAAY,WAEX,UA7BPsC,EAAQ9C,2BClFtD,IAAM0J,EAAe,uCAAG,WAAOlH,GAAP,+BAAAL,EAAA,sEAGyDwH,QAAQC,IAAI,CACxFpH,EAAI+D,MAAMlD,QAAQmC,WAAWqE,OAC7BrH,EAAI+D,MAAMlD,QAAQiD,mBAClB9D,EAAI+D,MAAMlD,QAAQyG,qBAClBtH,EAAI+D,MAAMlD,QAAQ0G,mBAPC,sCAGpBC,EAHoB,KAGL1D,EAHK,KAGawD,EAHb,KAGiCC,EAHjC,KAWrB1D,EAAe2D,EAAc9G,KAAI,iCAAE+G,KAAF,SACjCC,EAAaH,EAAiB,IAAOD,EAErC9G,EAAkBqD,EAAarF,OAASkJ,IAI1C7D,EAAarF,OAASkJ,GAlBC,wBAmBvB1K,QAAQC,IAAR,kDAAwD4G,EAAarF,OAArE,iCAAoGkJ,EAApG,MAnBuB,oDAuBpB,CACHlH,kBACAqD,eACA6D,YACA5D,qBA3BuB,4CAAH,sDCEf6D,EAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAOjJ,EAAT,EAASA,KAAMkJ,EAAf,EAAeA,UAAf,OACrB,gCACI,mBAAG7J,UAAW,iBAAd,SAAiC4J,IACjC,mBAAG5J,UAAW,gBAAkB6J,EAAhC,SAA4ClJ,QCFvCmJ,EAAkB,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,OACpC,OAAO,sBAAKhK,UAAU,4EAAf,UACH,cAAC,EAAD,eAAe+J,IACf,cAAC,EAAD,eAAeC,QCHVC,GAAgB,SAAC,GAIO,IAHHzH,EAGE,EAHFA,gBACAkH,EAEE,EAFFA,UACA5D,EACE,EADFA,iBAI9B,OAAO,sBAAK9F,UAAU,4BAAf,UAEH,cAAC,EAAD,CACI+J,MAAO,CAACpJ,KAAM,YAAaiJ,MAAOF,EAAWG,UAAW,aAE5D,wBACA,cAAC,EAAD,CACIE,MAAO,CACHpJ,KAAM,mBACNiJ,MAAOpH,EACPqH,UAAW,gBAGnB,wBAEA,cAAC,EAAD,CACIE,MAAO,CAACpJ,KAAM,yBAA0BiJ,MAjBa,IAArB9D,EAAyB,EAAIA,EAAiBkB,UAiBF6C,UAAW,kBCZtFK,GAAW,SAAC,GAAQ,eAE7B,MAAoCjG,mBAAS,IAA7C,mBAAOe,EAAP,KAAmBjB,EAAnB,KACA,EAAoDE,mBAAS,IAA7D,mBAAOrE,EAAP,KAA2BC,EAA3B,KAEA,EAAoCoE,mBAAS,CACzCzB,gBAAiB,EACjBqD,aAAc,EACd6D,UAAW,EACX5D,iBAAkB,IAJtB,mBAAOzD,EAAP,KAAmB8H,EAAnB,KAOA,EAA8ClG,mBAAS,CAACzE,QAAS,KAAMwD,KAAM,CAACrC,KAAM,QAApF,mBAAOsE,EAAP,KAAwBqC,EAAxB,KAEA,EAAkCrD,oBAAS,GAA3C,mBAAOmG,EAAP,KAAkBC,EAAlB,KAGAhC,qBAAU,WACNiC,MACD,IAEH,IAAMA,EAAa,uCAAG,8BAAA3I,EAAA,sEACAD,EAAON,EAAmBC,UAD1B,cACZW,EADY,gBAEOkH,EAAgBlH,GAFvB,OAEZK,EAFY,OAKlBsD,EAAgB3D,EAAKK,EAAYmD,GACjC2E,EAAc9H,GANI,2CAAH,qDAWbmD,EAAsB,SAAAjD,GACxBA,EAAegC,MAAK,SAAC5C,EAAG6C,GAAJ,OAAU7C,EAAElC,OAAS+E,EAAE/E,OAAS,GAAK,KACzDsE,EAAcxB,GACd8H,GAAa,IAIjB,OAAO,cAAC5J,EAAkB8J,SAAnB,CAA4BjC,MAAO,CAACtD,aAAYjB,iBAAhD,SACH,cAAC3E,EAA0BmL,SAA3B,CAAoCjC,MAAO,CAAC1I,qBAAoBC,yBAAhE,SACI,cAACgF,EAAkB0F,SAAnB,CAA4BjC,MAAO,CAACjG,cAApC,SACI,cAACyC,EAAuByF,SAAxB,CAAiCjC,MAAO,CAACrD,mBAAzC,SACI,sBAAKjF,UAAU,iBAAiBe,MAAO,CAACE,gBAAiB,WAAzD,UACI,sBAAKjB,UAAU,wCAAf,UACI,oBAAIA,UAAU,YAAd,2BACA,cAACqH,EAAD,CAAiBpC,gBAAiBA,EAAiBqC,mBAAoBA,OAE3E,mBAAGtH,UAAU,eAAb,mHAIA,cAAC,GAAD,eAAmBqC,IAClB+H,EAAY,cAAC,EAAD,IAAkB,cAAC,EAAD,gBC3DvDI,IAASC,OAAO,cAAC,GAAD,IACZC,SAASC,eAAe,W","file":"static/js/main.8aba3ffa.chunk.js","sourcesContent":["import configCommon from './common.json';\n// Using `require` as `import` does not support dynamic loading (yet).\nconst configEnv = require(`./${process.env.NODE_ENV}.json`);\nconst types = require('./types.json');\n\n// Accepting React env vars and aggregating them into `config` object.\nconst envVarNames = [\n  'REACT_APP_PROVIDER_SOCKET',\n  'REACT_APP_DEVELOPMENT_KEYRING'\n];\nconst envVars = envVarNames.reduce((mem, n) => {\n  // Remove the `REACT_APP_` prefix\n  if (process.env[n] !== undefined) mem[n.slice(10)] = process.env[n];\n  return mem;\n}, {});\n\nconst config = { ...configCommon, ...configEnv, ...envVars, types };\nexport default config;\n","import React, { useReducer, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport jsonrpc from '@polkadot/types/interfaces/jsonrpc';\nimport queryString from 'query-string';\n\nimport { ApiPromise, WsProvider } from '@polkadot/api';\nimport { web3Accounts, web3Enable } from '@polkadot/extension-dapp';\nimport keyring from '@polkadot/ui-keyring';\n\nimport config from '../config';\n\nconst parsedQuery = queryString.parse(window.location.search);\nconst connectedSocket = parsedQuery.rpc || config.PROVIDER_SOCKET;\nconsole.log(`Connected socket: ${connectedSocket}`);\n\n///\n// Initial state for `useReducer`\n\nconst INIT_STATE = {\n  socket: connectedSocket,\n  jsonrpc: { ...jsonrpc, ...config.RPC },\n  types: config.types,\n  keyring: null,\n  keyringState: null,\n  api: null,\n  apiError: null,\n  apiState: null\n};\n\n///\n// Reducer function for `useReducer`\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'CONNECT_INIT':\n      return { ...state, apiState: 'CONNECT_INIT' };\n\n    case 'CONNECT':\n      return { ...state, api: action.payload, apiState: 'CONNECTING' };\n\n    case 'CONNECT_SUCCESS':\n      return { ...state, apiState: 'READY' };\n\n    case 'CONNECT_ERROR':\n      return { ...state, apiState: 'ERROR', apiError: action.payload };\n\n    case 'LOAD_KEYRING':\n      return { ...state, keyringState: 'LOADING' };\n\n    case 'SET_KEYRING':\n      return { ...state, keyring: action.payload, keyringState: 'READY' };\n\n    case 'KEYRING_ERROR':\n      return { ...state, keyring: null, keyringState: 'ERROR' };\n\n    default:\n      throw new Error(`Unknown type: ${action.type}`);\n  }\n};\n\n///\n// Connecting to the Substrate node\n\nconst connect = (state, dispatch) => {\n  const { apiState, socket, jsonrpc, types } = state;\n  // We only want this function to be performed once\n  if (apiState) return;\n\n  dispatch({ type: 'CONNECT_INIT' });\n\n  const provider = new WsProvider(socket);\n  const _api = new ApiPromise({ provider, types, rpc: jsonrpc });\n\n  // Set listeners for disconnection and reconnection event.\n  _api.on('connected', () => {\n    dispatch({ type: 'CONNECT', payload: _api });\n    // `ready` event is not emitted upon reconnection and is checked explicitly here.\n    _api.isReady.then((_api) => dispatch({ type: 'CONNECT_SUCCESS' }));\n  });\n  _api.on('ready', () => dispatch({ type: 'CONNECT_SUCCESS' }));\n  _api.on('error', err => dispatch({ type: 'CONNECT_ERROR', payload: err }));\n};\n\n///\n// Loading accounts from dev and polkadot-js extension\n\nlet loadAccts = false;\nconst loadAccounts = (state, dispatch) => {\n  const asyncLoadAccounts = async () => {\n    dispatch({ type: 'LOAD_KEYRING' });\n    try {\n      await web3Enable(config.APP_NAME);\n      let allAccounts = await web3Accounts();\n      allAccounts = allAccounts.map(({ address, meta }) =>\n        ({ address, meta: { ...meta, name: `${meta.name} (${meta.source})` } }));\n      keyring.loadAll({ isDevelopment: config.DEVELOPMENT_KEYRING }, allAccounts);\n      dispatch({ type: 'SET_KEYRING', payload: keyring });\n    } catch (e) {\n      console.error(e);\n      dispatch({ type: 'KEYRING_ERROR' });\n    }\n  };\n\n  const { keyringState } = state;\n  // If `keyringState` is not null `asyncLoadAccounts` is running.\n  if (keyringState) return;\n  // If `loadAccts` is true, the `asyncLoadAccounts` has been run once.\n  if (loadAccts) return dispatch({ type: 'SET_KEYRING', payload: keyring });\n\n  // This is the heavy duty work\n  loadAccts = true;\n  asyncLoadAccounts();\n};\n\nconst SubstrateContext = React.createContext();\n\nconst SubstrateContextProvider = (props) => {\n  // filtering props and merge with default param value\n  const initState = { ...INIT_STATE };\n  const neededPropNames = ['socket', 'types'];\n  neededPropNames.forEach(key => {\n    initState[key] = (typeof props[key] === 'undefined' ? initState[key] : props[key]);\n  });\n\n  const [state, dispatch] = useReducer(reducer, initState);\n  connect(state, dispatch);\n  loadAccounts(state, dispatch);\n\n  return <SubstrateContext.Provider value={state}>\n    {props.children}\n  </SubstrateContext.Provider>;\n};\n\n// prop typechecking\nSubstrateContextProvider.propTypes = {\n  socket: PropTypes.string,\n  types: PropTypes.object\n};\n\nconst useSubstrate = () => ({ ...useContext(SubstrateContext) });\n\nexport { SubstrateContextProvider, useSubstrate };\n","import React from \"react\";\n\n//Stores the addresses of nominators the user selected for chilling;\nexport const SelectedNominatorsContext = React.createContext(null);\n","import React, {useContext} from \"react\";\nimport {SelectedNominatorsContext} from \"../../context/SelectedNominatorsContext\";\n\nexport const NominatorTile = ({address, amount, idx}) => {\n\n    const {selectedNominators, setSelectedNominators} = useContext(SelectedNominatorsContext);\n\n    const getBackgroundColor = () => idx % 2 !== 0 ? \"bg-gray-100\" : \"bg-white\";\n\n    const isSelected = () => selectedNominators.includes(address)\n\n    const trimAddress = () => `${address.substring(0, 5)}...${address.substring(address.length - 6, address.length - 1)}`\n\n    const handleOnChange = () => {\n        setSelectedNominators(\n            oldState =>\n                isSelected() ?\n                    oldState.filter(e => e !== address) :\n                    [...oldState, address]\n        );\n    }\n\n\n    return <div className={\"flex justify-between p-2 pr-4 border-gray-200 border items-center \" + getBackgroundColor()}>\n        <input checked={isSelected()} onChange={handleOnChange} type=\"checkbox\"\n               className=\"w-1/12 text-left\"/>\n        <div>\n            <p className=\"w-8/12 text-left self-center\">{trimAddress()}</p>\n        </div>\n        <p className=\"mx-4 w-3/12 text-right\">{amount}</p>\n    </div>\n}\n","import React from \"react\";\n\nexport const NominatorsContext = React.createContext(null)\n","import React from \"react\";\n\nexport const Button = ({name, onClick, color}) => {\n\n    const buttonColor = color === undefined ? \"#E6007A\" : color;\n    return <button\n        style={{\n            borderColor: buttonColor,\n            backgroundColor: buttonColor\n        }}\n        onClick={onClick}\n        className={`h-full items-center border-2 py-2 px-6  h-fit text-lg text-white tracking-wider font-bold rounded-sm`}>\n        {name}\n    </button>\n}\n\n","export const getEndpointForNetwork = provider => {\n    switch (provider) {\n        case SUPPORTED_NETWORKS.POLKADOT:\n            return \"wss://rpc.polkadot.io\";\n        // case SUPPORTED_NETWORKS.KUSAMA :\n        //  return \"wss://kusama-rpc.polkadot.io\";\n        default:\n            throw Error(`Unknown Provider ${provider}`);\n    }\n}\n\nexport const SUPPORTED_NETWORKS = Object.freeze({\n    \"POLKADOT\": \"POLKADOT\",\n})\n","import {getEndpointForNetwork, SUPPORTED_NETWORKS} from \"./setProvider\";\nimport {ApiPromise, WsProvider} from \"@polkadot/api\";\n\n\nlet _api = null;\n\nexport const getApi = async () => {\n\n    //Singleton here :D\n    if (_api !== null) {\n        console.log(\"used api instance from singleton\")\n        return _api;\n    }\n\n    const endpoint = getEndpointForNetwork(SUPPORTED_NETWORKS.POLKADOT);\n\n    const provider = new WsProvider(endpoint);\n    const api = await ApiPromise.create({provider});\n\n    const nodeName = await api.rpc.system.chain();\n\n    console.log(`Connected to node ${nodeName}`);\n\n    _api = api;\n    return _api;\n}\n","import {getApi} from \"./getApi\";\nimport {web3FromSource} from \"@polkadot/extension-dapp\";\n\nexport const chillNominators = async (statistics, account, nominatorsList) => {\n\n    const api = await getApi();\n\n    const {chillableAmount} = statistics;\n\n    //createTransactionBatch\n    const transactions = nominatorsList.map(nominator => api.tx.staking.chillOther(nominator));\n\n\n    // if they are higher than `chillableAmount`\n    if (nominatorsList.length > chillableAmount) {\n        nominatorsList.slice(0, chillableAmount - 1);\n    }\n\n\n    const injector = await web3FromSource(account.meta.source);\n\n    console.log(\"Total chillable:\", transactions.length);\n\n    console.log(\"Nominator\")\n\n\n    console.log(nominatorsList)\n    console.log(transactions)\n\n\n    // return;\n\n    const tx = api.tx.utility.batch(transactions);\n    await tx.signAndSend(account.address, {signer: injector.signer}, ({status}) => {\n        if (status.isInBlock) {\n            console.log(\n                `📀 Transaction ${tx.meta.name} included at blockHash ${status.asInBlock}`\n            );\n        } else if (status.isBroadcast) {\n            console.log(`🚀 Transaction broadcasted.`);\n        } else if (status.isFinalized) {\n            console.log(\n                `💯 Transaction ${tx.meta.name}(..) Finalized at blockHash ${status.asFinalized}`\n            );\n        } else if (status.isReady) {\n            // let's not be too noisy..\n        } else {\n            console.log(`🤷 Other status ${status}`);\n        }\n    });\n\n}\n","import React, {useContext, useState} from \"react\";\nimport Switch from \"react-switch\";\nimport {NominatorsContext} from \"../../context/NominatorsContext\";\n\nexport const SortButton = ({}) => {\n\n\n    const {setNominators} = useContext(NominatorsContext);\n\n    const SORT_ORDER = Object.freeze({\n        \"ASC\": false,\n        \"DESC\": true\n    })\n    const [sortOrder, setSortOrder] = useState(SORT_ORDER.ASC)\n\n    const getSortOrderName = () => `${sortOrder === SORT_ORDER.ASC ? \"ASC\" : \"DESC\"}`\n\n    const sortNominators = order => {\n        setSortOrder(order);\n        setNominators(oldState => {\n                const newState = [...oldState];\n                order === SORT_ORDER.ASC ?\n                    newState.sort((a, b) => a.amount > b.amount ? 1 : -1) :\n                    newState.sort((a, b) => a.amount < b.amount ? 1 : -1);\n\n                return newState;\n            }\n        );\n    }\n\n    return <div className=\"flex items-center \">\n        <p className=\"pr-2 \">{getSortOrderName()}</p>\n        <Switch onChange={sortNominators}\n                onColor=\"#E6007A\"\n                offColor=\"#E6007A\"\n                checked={sortOrder}\n                checkedIcon={false}\n                uncheckedIcon={false}\n        />\n    </div>\n\n}\n","import React from \"react\";\n\nexport const StatisticsContext = React.createContext(null)\n","import React from \"react\";\n\nexport const SelectedAccountContext = React.createContext(null);\n","import {NominatorsContext} from \"../../context/NominatorsContext\";\nimport {SelectedNominatorsContext} from \"../../context/SelectedNominatorsContext\";\nimport React, {useContext, useState} from \"react\";\nimport {Button} from \"../Button\";\nimport {chillNominators} from \"../../utils/chillNominators\";\nimport {SortButton} from \"./SortButton\";\nimport {RangeSlider} from \"../slider/RangeSlider\";\nimport {TxButton} from \"../../substrate-lib/components\";\nimport {StatisticsContext} from \"../../context/StatisticsContext\";\nimport {SelectedAccountContext} from \"../../context/SelectedAccountContext\";\n\nexport const TableHeader = () => {\n\n    const {nominators, setNominators} = useContext(NominatorsContext);\n    const {selectedNominators} = useContext(SelectedNominatorsContext);\n    const {statistics} = useContext(StatisticsContext);\n    const {selectedAccount} = useContext(SelectedAccountContext);\n\n    const handleOnClick = () => {\n        chillNominators(statistics, selectedAccount, selectedNominators);\n\n    }\n\n    const getButtonName = () => `Chill ${selectedNominators.length}`\n\n\n    return <div className=\"text-lg\">\n\n        <div className=\"flex justify-between mb-2  p-4  bg-white items-center\">\n            <p className=\"text-2xl \">Nominators ({nominators.length})</p>\n            <div className=\"flex justify-between items-center w-4/12 \">\n                <SortButton/>\n                <Button onClick={handleOnClick} name={getButtonName()}/>\n            </div>\n        </div>\n        <div className=\"flex items-center font-bold px-4 py-2 bg-white \">\n            <p className=\"w-1/12 text-left\">Wanna Chill ? </p>\n            <p className=\"w-8/12\">Address</p>\n            <p className=\"w-3/12 text-right  \">Amount</p>\n        </div>\n    </div>\n\n}\n","import React, {useContext} from \"react\";\nimport {SelectedNominatorsContext} from \"../../context/SelectedNominatorsContext\";\nimport {NominatorsContext} from \"../../context/NominatorsContext\";\n\nexport const ChillAllTile = () => {\n    const {selectedNominators, setSelectedNominators} = useContext(SelectedNominatorsContext);\n    const {nominators} = useContext(NominatorsContext);\n\n    const getBackgroundColor = () => \"bg-gray-100\";\n\n    const handleOnChange = (val) => {\n        const isSelected = val.target.checked;\n        setSelectedNominators(_ => isSelected ? [...nominators.map(e => e.address)] : []);\n    }\n\n    return <div className={\"flex justify-between p-2 border-gray-200 border items-center \" + getBackgroundColor()}>\n        <input onChange={(val) => handleOnChange(val)} type=\"checkbox\" className=\"w-1/12 text-left\"/>\n        <p className=\"w-8/12 text-left self-center font-bold\">Chill all nominators</p>\n        <p className=\"mx-4 w-3/12 text-right\"></p>\n    </div>\n}\n","import React, {useContext} from \"react\";\nimport {NominatorTile} from \"./NominatorTile\";\nimport {TableHeader} from \"./TableHeader\";\nimport {NominatorsContext} from \"../../context/NominatorsContext\";\nimport {ChillAllTile} from \"./ChillAllTile\";\n\nexport const NominatorTable = () => {\n\n    const {nominators, onNominatorsFetched} = useContext(NominatorsContext);\n\n\n    return <div>\n        <TableHeader/>\n        <ChillAllTile/>\n        {nominators.map((nominator, key) => <NominatorTile {...nominator} idx={key} key={nominator.address}/>)}\n    </div>\n}\n","import React from \"react\"\n\n//Todo add fancy loading state!!!\nexport const LoadingState = () => <p>Nominators are being loaded...</p>\n","//provider can be kusama or polkadot\n\n\nexport const fetchNominators = async (api, statistics, onSuccess) => {\n\n    const {nominatorIds, minNominatorBond} = statistics;\n\n    await api.query.staking.bonded\n        .multi(nominatorIds)\n        .then(async (_controllers) => {\n            const controllers = _controllers.map((controller) =>\n                controller.unwrapOrDefault()\n            );\n            await api.query.staking.ledger\n                .multi(controllers)\n                .then(async (_stakes) => {\n                    const nominatorsBelow = _stakes\n                        .map((stake) => stake.unwrapOrDefault())\n                        .filter((item) => item.total.toBn() < minNominatorBond.toNumber())\n                        .map(({stash, total}) => ({\n                            address: stash.toHuman(),\n                            amount: total.toHuman(),\n                        }));\n\n                    onSuccess(nominatorsBelow)\n\n                });\n        });\n\n}\n\n\n","/* This example requires Tailwind CSS v2.0+ */\nimport React, {Fragment, useEffect, useState} from \"react\";\nimport {web3Accounts, web3Enable} from \"@polkadot/extension-dapp\";\nimport {Listbox, Transition} from '@headlessui/react'\nimport {CheckIcon, SelectorIcon} from '@heroicons/react/solid'\nimport {getApi} from \"../utils/getApi\";\n\n\nfunction classNames(...classes) {\n    return classes.filter(Boolean).join(' ')\n}\n\nexport function ConnectToWallet({selectedAccount, setSelectedAccount}) {\n    const [accounts, setAccounts] = useState([]);\n    const [balance, setBalance] = useState(\"\");\n\n\n    const startWeb3 = async () => {\n        const allInjected = await web3Enable('dotsama-chill');\n\n        const allAccounts = await web3Accounts();\n\n\n        setAccounts(allAccounts);\n        setSelectedAccount(allAccounts[0]);\n\n        fetchBalance(allAccounts[0]);\n\n    }\n\n\n    const handleOnAccountChange = async (newAccount) => {\n        setSelectedAccount(newAccount);\n        fetchBalance(newAccount);\n\n    }\n\n    const fetchBalance = async (account) => {\n        const api = await getApi();\n\n        const {data: {free: previousFree}} = await api.query.system.account(account.address);\n        setBalance(previousFree.toHuman());\n    }\n\n    useEffect(() => {\n        startWeb3()\n    }, []);\n\n\n    return (\n\n        accounts.length === 0 ? <p>Please connect Polkadot.js Wallet</p> :\n\n            <div className=\"flex items-center\">\n                <p className=\"pr-4\">{balance}</p>\n                <Listbox value={selectedAccount} onChange={handleOnAccountChange}>\n                    {({open}) => (\n                        <>\n                            <div className=\"mt-1 relative pr-4\">\n                                <Listbox.Button\n                                    className=\"relative w-full bg-white border border-gray-300 rounded-md shadow-sm pl-3 pr-10 py-2 text-left cursor-default focus:outline-none focus:ring-1 focus:ring-black focus:border-black sm:text-sm\">\n              <span className=\"flex items-center\">\n                {/*<img src={selected.avatar} alt=\"\" className=\"flex-shrink-0 h-6 w-6 rounded-full\"/>*/}\n                  <span className=\"ml-3 block truncate\">{selectedAccount.meta.name}</span>\n              </span>\n                                    <span\n                                        className=\"ml-3 absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none\">\n                <SelectorIcon className=\"h-5 w-5 text-gray-400\" aria-hidden=\"true\"/>\n              </span>\n                                </Listbox.Button>\n\n                                <Transition\n                                    show={open}\n                                    as={Fragment}\n                                    leave=\"transition ease-in duration-100\"\n                                    leaveFrom=\"opacity-100\"\n                                    leaveTo=\"opacity-0\"\n                                >\n                                    <Listbox.Options\n                                        className=\"absolute z-10 mt-1 w-full bg-white shadow-lg max-h-56 rounded-md py-1 text-base ring-1 ring-black ring-opacity-5 overflow-auto focus:outline-none sm:text-sm\">\n                                        {accounts.map((account) => (\n                                            <Listbox.Option\n                                                key={account.address}\n                                                className={({active}) =>\n                                                    classNames(\n                                                        active ? 'text-white bg-black' : 'text-gray-900',\n                                                        'cursor-default select-none relative py-2 pl-3 pr-9'\n                                                    )\n                                                }\n                                                value={account}\n                                            >\n                                                {({selected, active}) => (\n                                                    <>\n                                                        <div className=\"flex items-center\">\n                                                            {/*<img src={account.avatar} alt=\"\" className=\"flex-shrink-0 h-6 w-6 rounded-full\"/>*/}\n                                                            <span\n                                                                className={classNames(selected ? 'font-semibold' : 'font-normal', 'ml-3 block truncate')}\n                                                            >\n                            {account.meta.name}\n                          </span>\n                                                        </div>\n\n                                                        {selected ? (\n                                                            <span\n                                                                className={classNames(\n                                                                    active ? 'text-white' : 'text-black',\n                                                                    'absolute inset-y-0 right-0 flex items-center pr-4'\n                                                                )}\n                                                            >\n                            <CheckIcon className=\"h-5 w-5\" aria-hidden=\"true\"/>\n                          </span>\n                                                        ) : null}\n                                                    </>\n                                                )}\n                                            </Listbox.Option>\n                                        ))}\n                                    </Listbox.Options>\n                                </Transition>\n                            </div>\n                        </>\n                    )}\n                </Listbox>\n            </div>\n    )\n}\n","export const fetchStatistics = async (api) => {\n\n\n    const [nominatorKeys, minNominatorBond, maxNominatorsCount, chillThreshold] = await Promise.all([\n            api.query.staking.nominators.keys(),\n            api.query.staking.minNominatorBond(),\n            api.query.staking.maxNominatorsCount(),\n            api.query.staking.chillThreshold(),\n        ],\n    );\n\n    const nominatorIds = nominatorKeys.map(({args: [nominatorId]}) => nominatorId)\n    const threshold = (chillThreshold / 100) * maxNominatorsCount;\n\n    const chillableAmount = nominatorIds.length - threshold;\n\n    // User should not be allowed to chillOther as this is not possible if it is below threshold.\n    //TODO isnt the resulting array of fetch nominators empty if this case happens ?\n    if (nominatorIds.length < threshold) {\n        console.log(`You can\\'t chill others when nominators (${nominatorIds.length}) is below threshold (${threshold})`);\n        return;\n    }\n\n    return {\n        chillableAmount,\n        nominatorIds,\n        threshold,\n        minNominatorBond\n    }\n}\n","import React from \"react\";\n\nexport const Statistic = ({count, name, textColor}) =>\n    <div>\n        <p className={\"text-4xl pb-2 \"}>{count}</p>\n        <p className={\"text-lg text-\" + textColor}>{name}</p>\n    </div>\n\n","import React from \"react\";\nimport {Statistic} from \"./Statistic\";\n\nexport const StatisticsGroup = ({first, second}) => {\n    return <div className=\"gap-8  bg-white border-white rounded-2xl mb-4 p-12 px-16 grid grid-cols-2\">\n        <Statistic {...first}/>\n        <Statistic {...second}/>\n    </div>\n}\n","import React from \"react\";\nimport {StatisticsGroup} from \"./StatisticsGroup\";\n\nexport const StatisticsBox = ({\n                                  chillableAmount,\n                                  threshold,\n                                  minNominatorBond\n                              }) => {\n\n    const minNominatorBondOrDefault = () => minNominatorBond === 0 ? 0 : minNominatorBond.toHuman()\n    return <div className=\"flex justify-between mb-8\">\n\n        <StatisticsGroup\n            first={{name: \"Threshold\", count: threshold, textColor: \"red-500\"}}\n        />\n        <div></div>\n        <StatisticsGroup\n            first={{\n                name: \"Chillable Amount\",\n                count: chillableAmount,\n                textColor: \"yellow-500\"\n            }}\n        />\n        <div></div>\n\n        <StatisticsGroup\n            first={{name: \"Minimum Nominator Bond\", count: minNominatorBondOrDefault(), textColor: \"blue-500\"}}\n        />\n\n    </div>\n}\n","import {NominatorTable} from \"./components/table/NominatorTable\";\nimport {NominatorsContext} from \"./context/NominatorsContext\";\nimport React, {useEffect, useState} from \"react\";\nimport {LoadingState} from \"./components/LoadingState\";\nimport {fetchNominators} from \"./utils/fetchNominators\";\nimport {SUPPORTED_NETWORKS} from \"./utils/setProvider\";\nimport {SelectedNominatorsContext} from \"./context/SelectedNominatorsContext\";\nimport {ConnectToWallet} from \"./components/ConnectToWallet\";\nimport {getApi} from \"./utils/getApi\";\nimport {fetchStatistics} from \"./utils/fetchStatistics\";\nimport {StatisticsContext} from \"./context/StatisticsContext\";\nimport {SelectedAccountContext} from \"./context/SelectedAccountContext\";\nimport {StatisticsBox} from \"./components/statistics/StatisticsBox\";\n\nexport const ChillApp = ({}) => {\n\n    const [nominators, setNominators] = useState([]);\n    const [selectedNominators, setSelectedNominators] = useState([]);\n\n    const [statistics, setStatistics] = useState({\n        chillableAmount: 0,\n        nominatorIds: 0,\n        threshold: 0,\n        minNominatorBond: 0\n    });\n\n    const [selectedAccount, setSelectedAccount] = useState({address: null, meta: {name: null}})\n\n    const [isLoading, setIsLoading] = useState(true);\n\n\n    useEffect(() => {\n        setupChillApp();\n    }, [])\n\n    const setupChillApp = async () => {\n        const api = await getApi(SUPPORTED_NETWORKS.POLKADOT);\n        const statistics = await fetchStatistics(api);\n\n\n        fetchNominators(api, statistics, onNominatorsFetched);\n        setStatistics(statistics);\n\n    }\n\n\n    const onNominatorsFetched = nominatorsList => {\n        nominatorsList.sort((a, b) => a.amount > b.amount ? 1 : -1);\n        setNominators(nominatorsList);\n        setIsLoading(false);\n    }\n\n\n    return <NominatorsContext.Provider value={{nominators, setNominators}}>\n        <SelectedNominatorsContext.Provider value={{selectedNominators, setSelectedNominators}}>\n            <StatisticsContext.Provider value={{statistics}}>\n                <SelectedAccountContext.Provider value={{selectedAccount}}>\n                    <div className=\" p-24 h-screen\" style={{backgroundColor: \"#f5f3f1\"}}>\n                        <div className=\"flex justify-between items-start pb-6\">\n                            <h1 className=\"text-4xl \">dotsama-chill</h1>\n                            <ConnectToWallet selectedAccount={selectedAccount} setSelectedAccount={setSelectedAccount}/>\n                        </div>\n                        <p className=\"text-md pb-6\">A tool to list nominators below threshold and has the option to\n                            chill multiple\n                            nominators in\n                            a batch.</p>\n                        <StatisticsBox {...statistics}/>\n                        {isLoading ? <LoadingState/> : <NominatorTable/>}\n                    </div>\n                </SelectedAccountContext.Provider>\n            </StatisticsContext.Provider>\n        </SelectedNominatorsContext.Provider>\n    </NominatorsContext.Provider>\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport \"./index.css\";\n\nimport App from './App';\nimport {ChillApp} from \"./ChillApp\";\n\nReactDOM.render(<ChillApp/>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}